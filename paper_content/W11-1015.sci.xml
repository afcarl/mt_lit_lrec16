<PAPER>
  <FILENO/>
  <TITLE>A General-Purpose Rule Extractor for SCFG-Based Machine Translation</TITLE>
  <AUTHORS>
    <AUTHOR>Greg Hanneman</AUTHOR>
    <AUTHOR>Michelle Burroughs</AUTHOR>
  </AUTHORS>
  <ABSTRACT>
    <A-S ID="S-45475">We present a rule extractor for SCFG-based MT that generalizes many of the contraints present in existing SCFG extraction algorithms.</A-S>
    <A-S ID="S-45476">Our method&#8217;s increased rule coverage comes from allowing multiple alignments, virtual nodes, and multiple tree decompositions in the extraction process.</A-S>
    <A-S ID="S-45477">At decoding time, we improve automatic metric scores by significantly increasing the number of phrase pairs that match a given test set, while our experiments with hierarchical grammar filtering indicate that more intelligent filtering schemes will also provide a key to future gains.</A-S>
  </ABSTRACT>
  <BODY>
    <DIV DEPTH="0">
      <HEADER>1 Introduction</HEADER>
      <P>
        <S ID="S-45478">Syntax-based machine translation systems, regardless of the underlying formalism they use, depend on a method for acquiring bilingual rules in that formalism to build the system&#8217;s translation model.</S>
        <S ID="S-45479">In modern syntax-based MT, this formalism is often synchronous context-free grammar (SCFG), and the SCFG rules are obtained automatically from parallel data through a large variety of methods.</S>
        <S ID="S-45480">Some SCFG rule extraction techniques require only Viterbi word alignment links between the source and target sides of the input corpus (<REF ID="R-01" RPTR="4">Chiang, 2005</REF>), while methods based on linguistic constituency structure require the source and/or target side of the input to be parsed.</S>
        <S ID="S-45481">Among such techniques, most retain the dependency on Viterbi word alignments for each sentence (<REF ID="R-03" RPTR="11">Galley et al., 2004</REF>; Zollmann and Venugopal, 2006; <REF ID="R-08" RPTR="19">Lavie et al., 2008</REF>; <REF ID="R-02" RPTR="6">Chiang, 2010</REF>) while others make use of a general, corpus-level statistical lexicon instead of individual alignment links (<REF ID="R-15" RPTR="32">Zhechev and Way, 2008</REF>).</S>
        <S ID="S-45482">Each method may also place constraints on the size, format, or structure of the rules it returns.</S>
      </P>
      <P>
        <S ID="S-45483">This paper describes a new, general-purpose rule extractor intended for cases in which two parse trees and Viterbi word alignment links are provided for each sentence, although compatibility with singleparse-tree extraction methods can be achieved by supplying a flat &#8220;dummy&#8221; parse for the missing tree.</S>
        <S ID="S-45484">Our framework for rule extraction is thus most similar to the Stat-XFER system (<REF ID="R-08" RPTR="20">Lavie et al., 2008</REF>; <REF ID="R-00" RPTR="3">Ambati et al., 2009</REF>) and the tree-to-tree situation considered by <REF ID="R-02" RPTR="9">Chiang (2010)</REF>.</S>
        <S ID="S-45485">However, we significantly broaden the scope of allowable rules compared to the Stat-XFER heuristics, and our approach differs from Chiang&#8217;s system in its respect of the linguistic constituency constraints expressed in the input tree structure.</S>
        <S ID="S-45486">In summary, we attempt to extract the greatest possible number of syntactically motivated rules while not allowing them to violate explicit constituent boundaries on either the source or target side.</S>
        <S ID="S-45487">This is achieved by allowing creation of virtual nodes, by allowing multiple decompositions of the same tree pair, and by allowing extraction of SCFG rules beyond the minimial set required to regenerate the tree pair.</S>
      </P>
      <P>
        <S ID="S-45488">After describing our extraction method and comparing it to a number of existing SCFG extraction techniques, we present a series of experiments examining the number of rules that may be produced from an input corpus.</S>
        <S ID="S-45489">We also describe experiments on Chinese-to-English translation that suggest that filtering a very large extracted grammar to a more</S>
      </P>
      <P>
        <S ID="S-45490">moderate-sized translation model is an important consideration for obtaining strong results.</S>
        <S ID="S-45491">Finally, this paper concludes with some suggestions for future work.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>2 Rule Extraction Algorithm</HEADER>
      <P>
        <S ID="S-45641">We begin with a parallel sentence consisting of a source-side parse tree S, a target-side parse tree T , and a Viterbi word alignment between the trees&#8217; leaves.</S>
        <S ID="S-45642">A sample sentence of this type is shown in Figure 1.</S>
        <S ID="S-45643">Our goal is to extract a number of SCFG rules that are licensed by this input.</S>
      </P>
      <DIV DEPTH="1">
        <HEADER>2.1 Node Alignment</HEADER>
        <P>
          <S ID="S-45492">Our algorithm first computes a node alignment between the parallel trees.</S>
          <S ID="S-45493">A node s in tree S is aligned to a node t in tree T if the following constraints are met.</S>
          <S ID="S-45494">First, all words in the yield of s must either be aligned to words within the yield of t, or they must be unaligned.</S>
          <S ID="S-45495">Second, the reverse must also hold: all words in the yield of t must be aligned to words within the yield of s or again be unaligned.</S>
          <S ID="S-45496">This is analogous to the word-alignment consistency constraint of phrase-based SMT phrase extraction (<REF ID="R-06" RPTR="16">Koehn et al., 2003</REF>).</S>
          <S ID="S-45497">In Figure 1, for example, the NP dominating the French words les voitures bleues is aligned to the equivalent English NP node dominating blue cars.</S>
        </P>
        <P>
          <S ID="S-45498">As in phrase-based SMT, where a phrase in one language may be consistent with multiple possible phrases in the other language, we allow parse nodes in both trees to have multiple node alignments.</S>
          <S ID="S-45499">This is in contrast to one-derivation rule extractors such as that of <REF ID="R-08" RPTR="23">Lavie et al. (2008)</REF>, in which each node</S>
        </P>
        <P>
          <S ID="S-45500">in S may only be aligned to a single node in T and vice versa.</S>
          <S ID="S-45501">The French NP node Ma m&#232;re, for example, aligns to both the NNP and NP nodes in English producing Mother.</S>
        </P>
        <P>
          <S ID="S-45502">Besides aligning existing nodes in both parse trees to the extent possible, we also permit the introduction of &#8220;virtual&#8221; nodes into either tree.</S>
          <S ID="S-45503">Virtual nodes are created when two or more contiguous children of an existing node are aligned consistently to a node or a similar set of two or more contiguous children of a node in the opposite parse tree.</S>
          <S ID="S-45504">Virtual nodes may be aligned to &#8220;original&#8221; nodes in the opposite tree or to other virtual nodes.</S>
        </P>
        <P>
          <S ID="S-45505">In Figure 1, the existing English NP node blue cars can be aligned to a new virtual node in French that dominates the N node voitures and the AP node bleues.</S>
          <S ID="S-45506">The virtual node is inserted as the parent of N and AP, and as the child of the NP node directly above.</S>
          <S ID="S-45507">In conjunction with node alignments between existing nodes, this means that the English NP blue cars is now aligned twice: once to the original French NP node and once to the virtual node N+AP.</S>
          <S ID="S-45508">We thus replicate the behavior of &#8220;growing into the gaps&#8221; from phrase-based SMT in the presence of unaligned words.</S>
          <S ID="S-45509">As another example, a virtual node in French covering the V node avait and the ADV node toujours could be created to align consistently with a virtual node in English covering the VBD node had and the ADVP node always.</S>
        </P>
        <P>
          <S ID="S-45510">Since virtual nodes are always created out of children of the same node, they are always consistent with the existing syntactic structure of the tree.</S>
          <S ID="S-45511">Within the constraints of the existing tree structure and word alignments, however, all possible virtual nodes are considered.</S>
          <S ID="S-45512">This is in keeping with our philosophy of allowing multiple alignments without violating constituent boundaries.</S>
          <S ID="S-45513">Near the top of the trees in Figure 1, for example, French virtual nodes NP+VN+NP (aligned to English NP+VP) and VN+NP+PU (aligned to VP+PU) both exist, even though they overlap.</S>
          <S ID="S-45514">In our procedure, we do allow a limit to be placed the number of child nodes that can be combined into a virtual node.</S>
          <S ID="S-45515">Setting this limit to two, for instance, will constrain node alignment to the space of possible synchronous binarizations consistent with the Viterbi word alignments.</S>
        </P>
      </DIV>
      <DIV DEPTH="1">
        <HEADER>2.2 Grammar Extraction</HEADER>
        <P>
          <S ID="S-45516">Given the final set of node alignments between the source tree and the target tree, SCFG rules are obtained via a grammar extraction step.</S>
          <S ID="S-45517">Rule extraction proceeds in a depth-first manner, such that rules are extracted and cached for all descendents of a source node s before rules in which s is the left-hand side are considered.</S>
          <S ID="S-45518">Extracting rules where source node s is the left-hand side consists of two phases: decomposition and combination.</S>
        </P>
        <P>
          <S ID="S-45519">The first phase is decomposition of node s into all distinct sets D = {d 1 , d 2 , .</S>
          <S ID="S-45520">.</S>
          <S ID="S-45521">.</S>
          <S ID="S-45522">, d n } of descendent nodes such that D spans the entire yield of node s, where d i &#8712; D is node-aligned or is an unaligned terminal for all i, and d i has no ancestor a where a is a descendent of s and a is node-aligned.</S>
          <S ID="S-45523">Each D thus represents the right-hand side of a minimal SCFG rule rooted at s.</S>
          <S ID="S-45524">Due to the introduction of overlapping virtual nodes, the decomposition step may involve finding multiple sets of decomposition points when there are multiple nodes with the same span at the same level of the tree.</S>
        </P>
        <P>
          <S ID="S-45525">The second phase involves composition of all rules derived from each element of D subject to certain constraints.</S>
          <S ID="S-45526">Rules are constructed using s, the set of nodes T s = {t | s is aligned to t}, and each decomposed node set D.</S>
          <S ID="S-45527">The set of left-hand sides is {s} &#215; T s , but there may be many right-hand sides for a given t and D.</S>
          <S ID="S-45528">Define rhs(d) as the set of right-hand sides of rules that are derived from d, plus all alignments of d to its aligned set T d .</S>
          <S ID="S-45529">If d is a terminal, word alignments are used in the place of node alignments.</S>
          <S ID="S-45530">To create a set of right-hand sides, we generate the set R = rhs(d 1 ) &#215; .</S>
          <S ID="S-45531">.</S>
          <S ID="S-45532">.</S>
          <S ID="S-45533">&#215; rhs(d n ).</S>
          <S ID="S-45534">For each r &#8712; R, we execute a combine operation such that combine(r) creates a new right-hand side by combining the component right-hand sides and recalculating co-indexes between the source- and target-side nonterminals.</S>
          <S ID="S-45535">Finally, we insert any unaligned terminals on either side.</S>
        </P>
        <P>
          <S ID="S-45536">We work through a small example of grammar extraction using Figure 2, which replicates a fragment of Figure 1 with virtual nodes included.</S>
          <S ID="S-45537">The English node JJ is aligned to the French nodes A and AP, the English node NNS is aligned to the French node N and the virtual node D+N, and the English node NP is aligned to the French node NP and the</S>
        </P>
        <P>
          <S ID="S-45538">&#9127;</S>
        </P>
        <P>
          <S ID="S-45539">&#9130;&#9128; rhs(N+AP) =</S>
        </P>
        <P>
          <S ID="S-45540">&#9130;&#9129;</S>
        </P>
        <P>
          <S ID="S-45541">[N+AP 1 ] :: [NP 1 ], [N 1 AP 2 ] :: [JJ 2 NNS 1 ], [N 1 A 2 ] :: [JJ 2 NNS 1 ], [voitures AP 1 ] :: [JJ 1 cars], [voitures A 1 ] :: [JJ 1 cars], [N 1 bleues] :: [blue NNS 1 ], [voitures bleues] :: [blue cars]</S>
        </P>
        <P>
          <S ID="S-45542">Next we must combine these pieces.</S>
          <S ID="S-45543">For example, from D 1 we derive the full right-hand sides</S>
        </P>
        <P>
          <S ID="S-45544">1. combine([les voitures]::[cars], [bleues]::[blue]) = [les voitures bleues]::[blue cars]</S>
        </P>
        <P>
          <S ID="S-45545">2. combine([les voitures]::[cars], [A 1 ]::[JJ 1 ]) = [les voitures A 1 ]::[JJ 1 cars]</S>
        </P>
        <P>
          <S ID="S-45546">3. combine([les voitures]::[cars], [AP 1 ]::[JJ 1 ]) = [les voitures AP 1 ]::[JJ 1 cars]</S>
        </P>
        <P>
          <S ID="S-45547">4. combine([D+N 1 ]::[NNS 1 ], [bleues]::[blue]) = [D+N 1 bleues]::[blue NNS 1 ]</S>
        </P>
        <P>
          <S ID="S-45548">&#9131;</S>
        </P>
        <P>
          <S ID="S-45549">&#9130;&#9132;</S>
        </P>
        <P>
          <S ID="S-45550">&#9130;&#9133;</S>
        </P>
        <P>
          <S ID="S-45551">virtual node N+AP.</S>
          <S ID="S-45552">To extract rules from the French node NP, we consider two potential decompositions: D 1 = {D+N, AP} and D 2 = {les, N+AP}.</S>
          <S ID="S-45553">Since the French NP is aligned only to the English NP, the set of left-hand sides is {NP::NP}, where we use the symbol &#8220;::&#8221; to separate the source and target sides of joint nonterminal label or a rule.</S>
        </P>
        <P>
          <S ID="S-45554">In the next step, we use cached rules and alignments to generate all potential right-hand-side pieces from these top-level nodes:</S>
        </P>
        <P>
          <S ID="S-45555">rhs(D+N) =</S>
        </P>
        <P>
          <S ID="S-45556">&#9127; &#9128; rhs(AP) = &#9129; { [D+N 1 ] :: [NNS 1 ],</S>
        </P>
        <P>
          <S ID="S-45557">[les voitures] :: [cars]</S>
        </P>
        <P>
          <S ID="S-45558">[AP 1 ] :: [JJ 1 ], [A 1 ] :: [JJ 1 ], [bleues] :: [blue]</S>
        </P>
        <P>
          <S ID="S-45559">rhs(les) = &#8709;</S>
        </P>
        <P>
          <S ID="S-45560">&#9131; &#9132;</S>
        </P>
        <P>
          <S ID="S-45561">&#9133;</S>
        </P>
        <P>
          <S ID="S-45562">}</S>
        </P>
        <P>
          <S ID="S-45563">5. combine([D+N 1 ]::[NNS 1 ], [A 1 ]::[JJ 1 ]) = [D+N 1 A 2 ]::[JJ 2 NNS 1 ]</S>
        </P>
        <P>
          <S ID="S-45564">6. combine([D+N 1 ]::[NNS 1 ], [AP 1 ]::[JJ 1 ]) = [D+N 1 AP 2 ]::[JJ 2 NNS 1 ]</S>
        </P>
        <P>
          <S ID="S-45565">Similarly, we derive seven full right-hand sides from D 2 .</S>
          <S ID="S-45566">Since rhs(les) is empty, rules derived have right-hand sides equivalent to rhs(N+AP) with the unaligned les added on the source side to complete the span of the French NP.</S>
          <S ID="S-45567">For example, combine([N+AP 1 ]::[NP 1 ]) = [les N+AP 1 ]::[NP 1 ].</S>
        </P>
        <P>
          <S ID="S-45568">In the final step, the left-hand side is added to each full right-hand side.</S>
          <S ID="S-45569">Thus,</S>
        </P>
        <P>
          <S ID="S-45570">NP :: NP &#8594; [les voitures A 1 ] :: [JJ 1 cars]</S>
        </P>
        <P>
          <S ID="S-45571">is one example rule extracted from this tree.</S>
        </P>
        <P>
          <S ID="S-45572">The number of rules can grow rapidly: if the parse tree has a branching factor of b and a depth of h, there are potentially O(2 bh ) rules extracted.</S>
          <S ID="S-45573">To control this, we allow certain constraints on the rules extracted that can short-circuit right-hand-side formation.</S>
          <S ID="S-45574">We allow separate restrictions on the number of items that may appear on the right-hand side of phrase pair rules (max p ) and hierarchical grammar rules (max g ).</S>
          <S ID="S-45575">We also optionally allow the exclusion of parallel unary rules &#8212; that is, rules whose right-hand sides consist solely of a pair of aligned nonterminals.</S>
        </P>
        <P>
          <S ID="S-45576">3 Comparison to Other Methods</S>
        </P>
        <P>
          <S ID="S-45577">Table 1 compares the rule extractor described in Section 2 to other SCFG extraction methods described in the literature.</S>
          <S ID="S-45578">We include comparisons of our work against the Hiero system (<REF ID="R-01" RPTR="5">Chiang, 2005</REF>), the Stat-XFER system rule learner most recently described by <REF ID="R-00" RPTR="0">Ambati et al. (2009)</REF>, the composed version of GHKM rule extraction (<REF ID="R-04" RPTR="13">Galley et al., 2006</REF>), the so-called Syntax-Augmented MT (SAMT) system (Zollmann and Venugopal, 2006), and a Hiero&#8211; SAMT extension with source- and target-side syntax described by <REF ID="R-02" RPTR="10">Chiang (2010)</REF>.</S>
          <S ID="S-45579">Note that some of these methods make use of only target-side parse trees &#8212; or no parse trees at all, in the case of Hiero &#8212; but our primary interest in comparison is the constraints placed on the rule extraction process rather than the final output form of the rules themselves.</S>
          <S ID="S-45580">We highlight four specific dimensions along these lines.</S>
        </P>
        <P>
          <S ID="S-45581">Tree Constraints.</S>
          <S ID="S-45582">As we mentioned in this paper&#8217;s introduction, we do not allow any part of our extracted rules to violate constituent boundaries in the input parse trees.</S>
          <S ID="S-45583">This is in contrast to Hieroderived techniques, which focus on expanding grammar coverage by extracting rules for all spans in the input sentence pair that are consistently wordaligned, regardless of their correspondence to linguistic constituents.</S>
          <S ID="S-45584">Practitioners of both phrasebased and syntax-based SMT have reported severe grammar coverage issues when rules are required to exactly match parse constituents (<REF ID="R-06" RPTR="17">Koehn et al., 2003</REF>; <REF ID="R-02" RPTR="7">Chiang, 2010</REF>).</S>
          <S ID="S-45585">In our work, we attempt to improve the coverage of the grammar by allowing multiple node alignments, virtual nodes, and multiple tree decompositions rather than ignoring structure constraints.</S>
        </P>
        <P>
          <S ID="S-45586">Multiple Alignments.</S>
          <S ID="S-45587">In contrast to all other extraction methods in Table 1, ours allows a node in one parse tree to be aligned with multiple nodes in the other tree, as long as the word-alignment and structure constraints are satisfied.</S>
          <S ID="S-45588">However, we do not allow a node to have multiple simultaneous alignments &#8212; a single node alignment must be chosen for extracting an individual rule.</S>
          <S ID="S-45589">In practice, this prevents extraction of &#8220;triangle&#8221; rules where the same node appears on both the left- and right-hand side of the same rule.</S>
          <S ID="S-45590">1 Virtual Nodes.</S>
          <S ID="S-45591">In keeping with our philosophy of representing multiple alignments, our use of multiple and overlapping virtual nodes is less restrictive than the single-alignment constraint of Stat-XFER.</S>
          <S ID="S-45592">Another key difference is that Stat-XFER requires all virtual nodes to be aligned to original nodes in the other language, while we permit virtual&#8211;virtual node alignments.</S>
          <S ID="S-45593">In respecting existing tree structure constraints, our virtual node placement is more restrictive than SAMT or Chiang, where extracted nodes may cross existing constituent boundaries.</S>
        </P>
        <P>
          <S ID="S-45594">Multiple Derivations.</S>
          <S ID="S-45595"><REF ID="R-04" RPTR="12">Galley et al. (2006)</REF> argued that breaking a single tree pair into multiple decompositions is important for correct probability modeling.</S>
          <S ID="S-45596">We agree, and we base our rule extractor&#8217;s acquisition of multiple derivations per tree pair on techniques from both GHKM and Hiero.</S>
          <S ID="S-45597">More specifically, we borrow from Hiero the idea of creating hierarchical rules by subtracting and abstracting all possible subsets of smaller phrases (aligned nodes in our case) from larger phrases.</S>
          <S ID="S-45598">Like GHKM,</S>
        </P>
        <P>
          <S ID="S-45599">1 Figure 2 includes a potential triangle rule, D+N :: NNS &#8594;</S>
        </P>
        <P>
          <S ID="S-45600">[les N 1 ] :: [NNS 1 ], where the English NNS node appears on both sides of the rule.</S>
          <S ID="S-45601">It is simultaneously aligned to the French D+N and N nodes.</S>
        </P>
        <P>
          <S ID="S-45602">we do this exhaustively within some limit, although in our case we use a rank limit on a rule&#8217;s right-hand side rather than a limit on the depth of the subnode subtractions.</S>
          <S ID="S-45603">Our constraint achieves the goal of controlling the size of the rule set while remaining flexibile in terms of depth depending on the shape of the parse trees.</S>
        </P>
        <P>
          <S ID="S-45604">4 Experiments</S>
        </P>
        <P>
          <S ID="S-45605">We conducted experiments with our rule extractor on the FBIS corpus, made up of approximately 302,000 Chinese&#8211;English sentence pairs.</S>
          <S ID="S-45606">We parsed the corpus with the Chinese and English grammars of the Berkeley parser (<REF ID="R-12" RPTR="28">Petrov and Klein, 2007</REF>) and word-aligned it with GIZA++ (<REF ID="R-10" RPTR="25">Och and Ney, 2003</REF>).</S>
          <S ID="S-45607">The parsed and word-aligned FBIS corpus served as the input to our rule extractor, which we ran with a number of different settings.</S>
        </P>
        <P>
          <S ID="S-45608">First, we acquired a baseline rule extraction (&#8220;xfer-orig&#8221;) from our corpus using an implementation of the basic Stat-XFER rule learner (<REF ID="R-08" RPTR="21">Lavie et al., 2008</REF>), which decomposes each input tree pair into a single set of minimal SCFG rules 2 using only original nodes in the parse trees.</S>
          <S ID="S-45609">Next, we tested the effect of allowing multiple decompositions by running our own rule learner, but restricting its rules to also only make use of original nodes (&#8220;compatible&#8221;).</S>
          <S ID="S-45610">Finally, we investigated the total number of extractable rules by allowing the creation of virtual nodes from up to four adjacent sibling nodes and placing two different limits on the length of the right-hand side (&#8220;full-short&#8221; and &#8220;full-long&#8221;).</S>
          <S ID="S-45611">These configurations are summarized in Table 2.</S>
        </P>
        <P>
          <S ID="S-45612">Rule Set max p max g Virtual Unary</S>
        </P>
        <P>
          <S ID="S-45613">2 In practice, some Stat-XFER aligned nodes produce two</S>
        </P>
        <P>
          <S ID="S-45614">rules instead of one: a minimal hierarchical SCFG rule is always produced, and a phrase pair rule will also be produced for node yields within the max p cutoff.</S>
        </P>
        <P>
          <S ID="S-45615">4.1 Rules Extracted</S>
        </P>
        <P>
          <S ID="S-45616">As expected, we find that allowing multiple decompositions of each tree pair has a significant effect on the number of extracted rules.</S>
          <S ID="S-45617">Table 3 breaks the extracted rules for each configuration down into phrase pairs (all terminals on the right-hand side) and hierarchical rules (containing at least one nonterminal on the right-hand side).</S>
          <S ID="S-45618">We also count the number of extracted rule instances (tokens) against the number of unique rules (types).</S>
          <S ID="S-45619">The results show that multiple decomposition leads to a four-fold increase in the number of extracted grammar rules, even when the length of the Stat-XFER baseline rules is unbounded.</S>
          <S ID="S-45620">The number of extracted phrase pairs shows a smaller increase, but this is expected: the number of possible phrase pairs is proportional to the square of the sentence length, while the number of possible hierarchical rules is exponential, so there is more room for coverage improvement in the hierarchical grammar.</S>
        </P>
        <P>
          <S ID="S-45621">With virtual nodes included, there is again a large jump in both the number of extracted rule tokens and types, even at relatively short length limits.</S>
          <S ID="S-45622">When both max p and max g are set to 7, our rule extractor produces 1.5 times as many unique phrase pairs and 20.5 times as many unique hierarchical rules as the baseline Stat-XFER system, and nearly twice the number of hierarchical rules as when using length limits of 5.</S>
          <S ID="S-45623"><REF ID="R-00" RPTR="1">Ambati et al. (2009)</REF> showed the usefulness of extending rule extraction from exact original&#8211;original node alignments to cases in which original&#8211;virtual and virtual&#8211;original alignments were also permitted.</S>
          <S ID="S-45624">Our experiments confirm this, as only 60% (full-short) and 54% (fulllong) of our extracted rule types are made up of only original&#8211;original node alignments.</S>
          <S ID="S-45625">Further, we find a contribution from the new virtual&#8211;virtual case: approximately 8% of the rules extracted in the &#8220;fulllong&#8221; configuration from Table 3 are headed by a virtual&#8211;virtual alignment, and a similar number have a virtual&#8211;virtual alignment on their right-hand sides.</S>
        </P>
        <P>
          <S ID="S-45626">All four of the extracted rule sets show Zipfian distributions over rule frequency counts.</S>
          <S ID="S-45627">In the xferorig, full-short, and full-long configurations, between 82% and 86% of the extracted phrase pair rules, and between 88% and 92% of the extracted hierarchical rules, were observed only once.</S>
          <S ID="S-45628">These</S>
        </P>
        <P>
          <S ID="S-45629">Extracted Instances Unique Rules Rule Set Phrase Hierarchical Phrase Hierarchical</S>
        </P>
        <P>
          <S ID="S-45630">percentages are remarkably consistent despite substantial changes in grammar size, meaning that our more exhaustive method of rule extraction does not produce a disproportionate number of singletons.</S>
          <S ID="S-45631">3 On the other hand, it does weaken the average count of an extracted hierarchical rule type.</S>
          <S ID="S-45632">From Table 3, we can compute that the average phrase pair count remains at 3.5 when we move from xfer-orig to the two full configurations; however, the average hierarchical rule count drops from 2.4 to 1.7 (full-short) and finally 1.4 (full-long).</S>
          <S ID="S-45633">This likely again reflects the exponential increase in the number of extractable hierarchical rules compared to the quadratic increase in the phrase pairs.</S>
        </P>
        <P>
          <S ID="S-45634">4.2 Translation Results</S>
        </P>
        <P>
          <S ID="S-45635">The grammars obtained from our rule extractor can be filtered and formatted for use with a variety of SCFG-based decoders and rule formats.</S>
          <S ID="S-45636">We carried out end-to-end translation experiments with the various extracted rule sets from the FBIS corpus using the open-source decoder Joshua (Li et al., 2009).</S>
          <S ID="S-45637">Given a source-language string, Joshua translates by producing a synchronous parse of it according to a scored SCFG and a target-side language model.</S>
          <S ID="S-45638">A significant engineering challenge in building a real MT system of this type is selecting a more moderatesized subset of all extracted rules to retain in the final translation model.</S>
          <S ID="S-45639">This is an especially important consideration when dealing with expanded rule sets derived from virtual nodes and multiple decompositions in each input tree.</S>
        </P>
        <P>
          <S ID="S-45640">In our experiments, we pass all grammars through</S>
        </P>
      </DIV>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>3 The compatible configuration is somewhat of an outlier. It</HEADER>
      <P>
        <S ID="S-45644"></S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>4 Experiments</HEADER>
      <P>
        <S ID="S-45707">We conducted experiments with our rule extractor on the FBIS corpus, made up of approximately 302,000 Chinese&#8211;English sentence pairs.</S>
        <S ID="S-45708">We parsed the corpus with the Chinese and English grammars of the Berkeley parser (<REF ID="R-12" RPTR="29">Petrov and Klein, 2007</REF>) and word-aligned it with GIZA++ (<REF ID="R-10" RPTR="26">Och and Ney, 2003</REF>).</S>
        <S ID="S-45709">The parsed and word-aligned FBIS corpus served as the input to our rule extractor, which we ran with a number of different settings.</S>
      </P>
      <P>
        <S ID="S-45710">First, we acquired a baseline rule extraction (&#8220;xfer-orig&#8221;) from our corpus using an implementation of the basic Stat-XFER rule learner (<REF ID="R-08" RPTR="22">Lavie et al., 2008</REF>), which decomposes each input tree pair into a single set of minimal SCFG rules 2 using only original nodes in the parse trees.</S>
        <S ID="S-45711">Next, we tested the effect of allowing multiple decompositions by running our own rule learner, but restricting its rules to also only make use of original nodes (&#8220;compatible&#8221;).</S>
        <S ID="S-45712">Finally, we investigated the total number of extractable rules by allowing the creation of virtual nodes from up to four adjacent sibling nodes and placing two different limits on the length of the right-hand side (&#8220;full-short&#8221; and &#8220;full-long&#8221;).</S>
        <S ID="S-45713">These configurations are summarized in Table 2.</S>
      </P>
      <P>
        <S ID="S-45714">Rule Set max p max g Virtual Unary</S>
      </P>
      <P>
        <S ID="S-45715">2 In practice, some Stat-XFER aligned nodes produce two</S>
      </P>
      <P>
        <S ID="S-45716">rules instead of one: a minimal hierarchical SCFG rule is always produced, and a phrase pair rule will also be produced for node yields within the max p cutoff.</S>
      </P>
      <DIV DEPTH="1">
        <HEADER>4.1 Rules Extracted</HEADER>
        <P>
          <S ID="S-45645">As expected, we find that allowing multiple decompositions of each tree pair has a significant effect on the number of extracted rules.</S>
          <S ID="S-45646">Table 3 breaks the extracted rules for each configuration down into phrase pairs (all terminals on the right-hand side) and hierarchical rules (containing at least one nonterminal on the right-hand side).</S>
          <S ID="S-45647">We also count the number of extracted rule instances (tokens) against the number of unique rules (types).</S>
          <S ID="S-45648">The results show that multiple decomposition leads to a four-fold increase in the number of extracted grammar rules, even when the length of the Stat-XFER baseline rules is unbounded.</S>
          <S ID="S-45649">The number of extracted phrase pairs shows a smaller increase, but this is expected: the number of possible phrase pairs is proportional to the square of the sentence length, while the number of possible hierarchical rules is exponential, so there is more room for coverage improvement in the hierarchical grammar.</S>
        </P>
        <P>
          <S ID="S-45650">With virtual nodes included, there is again a large jump in both the number of extracted rule tokens and types, even at relatively short length limits.</S>
          <S ID="S-45651">When both max p and max g are set to 7, our rule extractor produces 1.5 times as many unique phrase pairs and 20.5 times as many unique hierarchical rules as the baseline Stat-XFER system, and nearly twice the number of hierarchical rules as when using length limits of 5.</S>
          <S ID="S-45652"><REF ID="R-00" RPTR="2">Ambati et al. (2009)</REF> showed the usefulness of extending rule extraction from exact original&#8211;original node alignments to cases in which original&#8211;virtual and virtual&#8211;original alignments were also permitted.</S>
          <S ID="S-45653">Our experiments confirm this, as only 60% (full-short) and 54% (fulllong) of our extracted rule types are made up of only original&#8211;original node alignments.</S>
          <S ID="S-45654">Further, we find a contribution from the new virtual&#8211;virtual case: approximately 8% of the rules extracted in the &#8220;fulllong&#8221; configuration from Table 3 are headed by a virtual&#8211;virtual alignment, and a similar number have a virtual&#8211;virtual alignment on their right-hand sides.</S>
        </P>
        <P>
          <S ID="S-45655">All four of the extracted rule sets show Zipfian distributions over rule frequency counts.</S>
          <S ID="S-45656">In the xferorig, full-short, and full-long configurations, between 82% and 86% of the extracted phrase pair rules, and between 88% and 92% of the extracted hierarchical rules, were observed only once.</S>
          <S ID="S-45657">These</S>
        </P>
        <P>
          <S ID="S-45658">Extracted Instances Unique Rules Rule Set Phrase Hierarchical Phrase Hierarchical</S>
        </P>
        <P>
          <S ID="S-45659">percentages are remarkably consistent despite substantial changes in grammar size, meaning that our more exhaustive method of rule extraction does not produce a disproportionate number of singletons.</S>
          <S ID="S-45660">3 On the other hand, it does weaken the average count of an extracted hierarchical rule type.</S>
          <S ID="S-45661">From Table 3, we can compute that the average phrase pair count remains at 3.5 when we move from xfer-orig to the two full configurations; however, the average hierarchical rule count drops from 2.4 to 1.7 (full-short) and finally 1.4 (full-long).</S>
          <S ID="S-45662">This likely again reflects the exponential increase in the number of extractable hierarchical rules compared to the quadratic increase in the phrase pairs.</S>
        </P>
      </DIV>
      <DIV DEPTH="1">
        <HEADER>4.2 Translation Results</HEADER>
        <P>
          <S ID="S-45663">The grammars obtained from our rule extractor can be filtered and formatted for use with a variety of SCFG-based decoders and rule formats.</S>
          <S ID="S-45664">We carried out end-to-end translation experiments with the various extracted rule sets from the FBIS corpus using the open-source decoder Joshua (Li et al., 2009).</S>
          <S ID="S-45665">Given a source-language string, Joshua translates by producing a synchronous parse of it according to a scored SCFG and a target-side language model.</S>
          <S ID="S-45666">A significant engineering challenge in building a real MT system of this type is selecting a more moderatesized subset of all extracted rules to retain in the final translation model.</S>
          <S ID="S-45667">This is an especially important consideration when dealing with expanded rule sets derived from virtual nodes and multiple decompositions in each input tree.</S>
        </P>
        <P>
          <S ID="S-45668">In our experiments, we pass all grammars through</S>
        </P>
        <P>
          <S ID="S-45669">3 The compatible configuration is somewhat of an outlier.</S>
          <S ID="S-45670">It</S>
        </P>
        <P>
          <S ID="S-45671">has proportionally fewer singleton phrase pairs (80%) than the other variants, likely because it allows multiple alignments and multiple decompositions without allowing virtual nodes.</S>
        </P>
        <P>
          <S ID="S-45672">two preprocessing steps before any translation model scoring.</S>
          <S ID="S-45673">First, we noticed that English cardinal numbers and punctuation marks in many languages tend to receive incorrect nonterminal labels during parsing, despite being closed-class items with clearly defined tags.</S>
          <S ID="S-45674">Therefore, before rule extraction, we globally correct the nodel labels of allnumeral terminals in English and certain punctuation marks in both English and Chinese.</S>
          <S ID="S-45675">Second, we attempt to reduce derivational ambiguity in cases where the same SCFG right-hand side appears in the grammar after extraction with a large number of possible left-hand-side labels.</S>
          <S ID="S-45676">To this end, we sort the possible left-hand sides by frequency for each unique right-hand side, and we remove the least frequent 10 percent of the label distribution.</S>
        </P>
        <P>
          <S ID="S-45677">Our translation model scoring is based on the feature set of <REF ID="R-05" RPTR="14">Hanneman et al. (2010)</REF>.</S>
          <S ID="S-45678">This includes the standard bidirectional conditional maximumlikelihood scores at both the word and phrase level on the right-hand side of rules.</S>
          <S ID="S-45679">We also include maximum-likelihood scores for the left-hand-side label given all or part of the right-hand side.</S>
          <S ID="S-45680">Using statistics local to each rule, we set binary indicator features for rules whose frequencies are &#8804; 3, plus five additional indicator features according to the format of the rule&#8217;s right-hand side, such as whether it is fully abstract.</S>
          <S ID="S-45681">Since the system in this paper is not constructed using any non-syntactic rules, we do not include the <REF ID="R-05" RPTR="15">Hanneman et al. (2010)</REF> &#8220;not labelable&#8221; maximum-likelihood features or the indicator features related to non-syntactic labels.</S>
        </P>
        <P>
          <S ID="S-45682">Beyond the above preprocessing and scoring common to all grammars, we experiment with three different solutions to the more difficult problem of selecting a final translation grammar.</S>
          <S ID="S-45683">In any case, we separate phrase pair rules from hierarchical rules</S>
        </P>
        <P>
          <S ID="S-45684">Rule Set Filter BLEU TER MET</S>
        </P>
        <P>
          <S ID="S-45685">and include in the grammar all phrase pair rules matching a given tuning or testing set.</S>
          <S ID="S-45686">Any improvement in phrase pair coverage during the extraction stage is thus directly passed along to decoding.</S>
          <S ID="S-45687">For hierarchical rules, we experiment with retaining the 10,000 or 100,000 most frequently extracted unique rules.</S>
          <S ID="S-45688">We also separate fully abstract hierarchical rules from partially lexicalized hierarchical rules, and in a further selection technique we retain the 5,000 most frequent abstract and 100,000 most frequent partially lexicalized rules.</S>
        </P>
        <P>
          <S ID="S-45689">Given these final rule sets, we tune our MT systems on the NIST MT 2006 data set using the minimum error-rate training package Z-MERT (<REF ID="R-09" RPTR="24">Zaidan, 2009</REF><REF ID="R-14" RPTR="31">Zaidan, 2009</REF>), and we test on NIST MT 2003.</S>
          <S ID="S-45690">Both sets have four reference translations.</S>
          <S ID="S-45691">Table 4 presents case-insensitive evaluation results on the test set according to the automatic metrics BLEU (<REF ID="R-11" RPTR="27">Papineni et al., 2002</REF>), TER (<REF ID="R-13" RPTR="30">Snover et al., 2006</REF>), and METEOR (<REF ID="R-07" RPTR="18">Lavie and Denkowski, 2009</REF>).</S>
          <S ID="S-45692">4 The trend in the results is that including a larger grammar is generally better for performance, but filtering techniques also play a substantial role in determining how well a given grammar will perform at run time.</S>
        </P>
        <P>
          <S ID="S-45693">We first compare the results in Table 4 for different rule sets all filtered the same way at decoding time.</S>
          <S ID="S-45694">With only 10,000 hierarchical rules in use (&#8220;10k&#8221;), the improvements in scores indicate that an important contribution is being made by the additional phrase pair coverage provided by each suc-</S>
        </P>
        <P>
          <S ID="S-45695">4 For METEOR scoring we use version 1.0 of the metric,</S>
        </P>
        <P>
          <S ID="S-45696">tuned to HTER with the exact, stemming, and synonymy modules enabled.</S>
        </P>
        <P>
          <S ID="S-45697">cessive rule set.</S>
          <S ID="S-45698">The original Stat-XFER rule extraction provides 244,988 phrase pairs that match the MT 2003 test set.</S>
          <S ID="S-45699">This is already increased to 520,995 in the compatible system using multiple decompositions.</S>
          <S ID="S-45700">With virtual nodes enabled, the full system produces 766,379 matching phrase pairs up to length 5 or 776,707 up to length 7.</S>
          <S ID="S-45701">These systems both score significantly higher than the Stat-XFER baseline according to BLEU and TER, and the ME- TEOR scores are likely statistically equivalent.</S>
          <S ID="S-45702">Across all configurations, we find that changing the grammar filtering technique &#8212; possibly combined with retuned decoder feature weights &#8212; also has a large influence on automatic metric scores.</S>
          <S ID="S-45703">Larger hierarchical grammars tend to score better, in some cases to the point of erasing the score differences between rule sets.</S>
          <S ID="S-45704">From this we conclude that making effective use of the extracted grammar, no matter its size, with intelligent filtering techniques is at least as important as the number and type of rules extracted overall.</S>
          <S ID="S-45705">Though the filtering results in Table 4 are still somewhat inconclusive, the relative success of the &#8220;5k+100k&#8221; setting shows that filtering fully abstract and partially lexicalized rules separately is a reasonable starting approach.</S>
          <S ID="S-45706">While fully abstract rules do tend to be more frequently observed in grammar extraction, and thus more reliably scored in the translation model, they also have the ability to overapply at decoding time because their use is not restricted to any particular lexical context.</S>
        </P>
      </DIV>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>5 Conclusions and Future Work</HEADER>
      <P>
        <S ID="S-45717">We demonstrated in Section 4.1 that the general SCFG extraction algorithm described in this paper is capable of producing very large linguistically motivated rule sets.</S>
        <S ID="S-45718">These rule sets can improve automatic metric scores at decoding time.</S>
        <S ID="S-45719">At the same time, we see the results in Section 4.2 as a springboard to more advanced and more intelligent methods of grammar filtering.</S>
        <S ID="S-45720">Our major research question for future work is to determine how to make the best runtime use of the grammars we can extract.</S>
        <S ID="S-45721">As we saw in Section 2, multiple decompositions of a single parse tree allow the same constituent to be built in a variety of ways.</S>
        <S ID="S-45722">This is generally good for coverage, but its downside at run time is that the decoder must manage a larger number of competing 142 derivations that, in the end, produce the same output string.</S>
        <S ID="S-45723">Grammar filtering that explicitly attempts to limit the derivational ambiguity of the retained rules may prevent the translation model probabilities of correct outputs from getting fragmented into redundant derivations.</S>
        <S ID="S-45724">So far we have only approximated this by using fully abstract rules as a proxy for the most derivationally ambiguous rules.</S>
        <S ID="S-45725">Filtering based on the content of virtual nodes may also be a reasonable strategy for selecting useful grammar rules and discarding those whose contributions are less necessary.</S>
        <S ID="S-45726">For example, we find in our current output many applications of rules involving virtual nodes that consist of an openclass category and a mark of punctuation, such as VBD+COMMA and NN+PU.</S>
        <S ID="S-45727">While there is nothing technically wrong with these rules, they may not be as helpful in translation as rules for nouns and adjectives such as JJ+NNP+NN or NNP+NNP in flat noun phrase structures such as former U.S. president Bill Clinton.</S>
        <S ID="S-45728">A final concern in making use of our large extracted grammars is the effect virtual nodes have on the size of the nonterminal set.</S>
        <S ID="S-45729">The Stat-XFER baseline grammar from our &#8220;xfer-orig&#8221; configuration uses a nonterminal set of 1,577 unique labels.</S>
        <S ID="S-45730">In our rule extractor so far, we have adopted the convention of naming virtual nodes with a concatenation of their component sibling labels, separated by &#8220;+&#8221;s.</S>
        <S ID="S-45731">With the large number of virtual node labels that may be created, this gives our &#8220;full-short&#8221; and &#8220;full-long&#8221; extracted grammars nonterminal sets of around 73,000 unique labels.</S>
        <S ID="S-45732">An undesirable consequence of such a large label set is that a particular SCFG right-hand side may acquire a large variety of left-hand-side labels, further contributing to the derivational ambiguity problems discussed above.</S>
        <S ID="S-45733">In future work, the problem could be addressed by reconsidering our naming scheme for virtual nodes, by allowing fuzzy matching of labels at translation time (<REF ID="R-02" RPTR="8">Chiang, 2010</REF>), or by other techniques aimed at reducing the size of the overall nonterminal set.</S>
      </P>
    </DIV>
  </BODY>
  <ACKNOWLEDGMENTS>
    <P>
      <S ID="S-45734">This research was supported in part by U.S. National Science Foundation grants IIS-0713402 and IIS- 0915327 and the DARPA GALE program.</S>
      <S ID="S-45735">We thank Vamshi Ambati and Jon Clark for helpful discussions regarding implementation details of the grammar extraction algorithm.</S>
      <S ID="S-45736">Thanks to Chris Dyer for providing the word-aligned and preprocessed FBIS corpus.</S>
      <S ID="S-45737">Finally, we thank Yahoo!</S>
      <S ID="S-45738">for the use of the M45 research computing cluster, where we ran many steps of our experimental pipeline.</S>
    </P>
  </ACKNOWLEDGMENTS>
  <REFERENCES>
    <REFERENCE ID="0">
      <RAUTHOR>Vamshi Ambati</RAUTHOR>
      <REFTITLE>Extraction of syntactic translation models from parallel data using syntax from source and target languages.</REFTITLE>
      <DATE>2009</DATE>
    </REFERENCE>
    <REFERENCE ID="1">
      <RAUTHOR>David Chiang</RAUTHOR>
      <REFTITLE>A hierarchical phrase-based model for statistical machine translation.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="2">
      <RAUTHOR>David Chiang</RAUTHOR>
      <REFTITLE>Learning to translate with source and target syntax.</REFTITLE>
      <DATE>2010</DATE>
    </REFERENCE>
    <REFERENCE ID="3">
      <RAUTHOR>Michel Galley</RAUTHOR>
      <REFTITLE>What&#8217;s in a translation rule?</REFTITLE>
      <DATE>2004</DATE>
    </REFERENCE>
    <REFERENCE ID="4">
      <RAUTHOR>Michel Galley</RAUTHOR>
      <REFTITLE>Scalable inference and training of context-rich syntactic translation models.</REFTITLE>
      <DATE>2006</DATE>
    </REFERENCE>
    <REFERENCE ID="5">
      <RAUTHOR>Greg Hanneman</RAUTHOR>
      <REFTITLE>Improved features and grammar selection for syntaxbased MT.</REFTITLE>
      <DATE>2010</DATE>
    </REFERENCE>
    <REFERENCE ID="6">
      <RAUTHOR>Philipp Koehn</RAUTHOR>
      <REFTITLE>Statistical phrase-based translation.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="7">
      <RAUTHOR>Alon Lavie</RAUTHOR>
      <REFTITLE>The METEOR metric for automatic evaluation of machine translation.</REFTITLE>
      <DATE>2009</DATE>
    </REFERENCE>
    <REFERENCE ID="8">
      <RAUTHOR>Alon Lavie</RAUTHOR>
      <REFTITLE>Syntax-driven learning of sub-sentential translation equivalents and translation rules from parsed parallel corpora.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
    <REFERENCE ID="9">
      <RAUTHOR>Zaidan</RAUTHOR>
      <REFTITLE>Joshua: An open source toolkit for parsing-based machine translation.</REFTITLE>
      <DATE>2009</DATE>
    </REFERENCE>
    <REFERENCE ID="10">
      <RAUTHOR>Franz Josef Och</RAUTHOR>
      <REFTITLE>A systematic comparison of various statistical alignment models.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="11">
      <RAUTHOR>Kishore Papineni</RAUTHOR>
      <REFTITLE>BLEU: A method for automatic evalution of machine translation.</REFTITLE>
      <DATE>2002</DATE>
    </REFERENCE>
    <REFERENCE ID="12">
      <RAUTHOR>Slav Petrov</RAUTHOR>
      <REFTITLE>Improved inference for unlexicalized parsing.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="13">
      <RAUTHOR>Matthew Snover</RAUTHOR>
      <REFTITLE>A study of translation edit rate with targeted human annotation.</REFTITLE>
      <DATE>2006</DATE>
    </REFERENCE>
    <REFERENCE ID="14">
      <RAUTHOR>Omar F Zaidan</RAUTHOR>
      <REFTITLE>Z-MERT: A fully configurable open source tool for minimum error rate training of machine translation systems.</REFTITLE>
      <DATE>2009</DATE>
    </REFERENCE>
    <REFERENCE ID="15">
      <RAUTHOR>Ventsislav Zhechev</RAUTHOR>
      <REFTITLE>Automatic generation of parallel treebanks.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
  </REFERENCES>
</PAPER>
