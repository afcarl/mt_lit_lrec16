<PAPER>
  <FILENO/>
  <TITLE>Online Learning Approaches in Computer Assisted Translation</TITLE>
  <AUTHORS>
    <AUTHOR>Prashant Mathur&#8225;&#8224;</AUTHOR>
    <AUTHOR>Mauro Cettolo&#8224;</AUTHOR>
  </AUTHORS>
  <ABSTRACT>
    <A-S ID="S-54236">We present a novel online learning approach for statistical machine translation tailored to the computer assisted translation scenario.</A-S>
    <A-S ID="S-54237">With the introduction of a simple online feature, we are able to adapt the translation model on the fly to the corrections made by the translators.</A-S>
    <A-S ID="S-54238">Additionally, we do online adaption of the feature weights with a large margin algorithm.</A-S>
    <A-S ID="S-54239">Our results show that our online adaptation technique outperforms the static phrase based statistical machine translation system by 6 BLEU points absolute, and a standard incremental adaptation approach by 2 BLEU points absolute.</A-S>
  </ABSTRACT>
  <BODY>
    <DIV DEPTH="0">
      <HEADER>1 Introduction</HEADER>
      <P>
        <S ID="S-54240">The growing needs of the localization and translation industry have recently boosted research around computer assisted translation (CAT) technology.</S>
        <S ID="S-54241">The purpose of CAT is to increase the productivity of a human translator.</S>
        <S ID="S-54242">A CAT tool comes as a package of a Translation Memory (TM), builtin spell checkers, a dictionary, a terminology list etc. which help the translator while translating a sentence.</S>
        <S ID="S-54243">Recent research has led to the integration of CAT tools with statistical machine translation (SMT) engines.</S>
        <S ID="S-54244">SMT makes use of a large available parallel corpus to generate statistical models for translation.</S>
        <S ID="S-54245">Due to their generalization capability, SMT systems are a good fit in this scenario and a seamless integration of SMT engines in CAT have shown to increase translator&#8217;s productivity (Federico et al., 2012).</S>
        <S ID="S-54246">Although automatic systems generate reliable translations they are not accurate enough to be used directly and need postedition by human translators.</S>
        <S ID="S-54247">In state-of-the-art CAT tools, the SMT systems are static in nature and so they cannot adapt to these corrections.</S>
        <S ID="S-54248">When a SMT system keeps repeating the same error, productivity of translators as well as their trust in SMT technology are negatively affected.</S>
        <S ID="S-54249">As an example, technical documentation typically contains a lot of repetitions due to the employed writing style and pervasive use of terminology.</S>
        <S ID="S-54250">Hence, in order to provide useful hints, SMT systems are expected to behave consistently regarding the translation of domainspecific terms.</S>
        <S ID="S-54251">However, if the user edits the translation of a technical term in the target text, most current SMT systems are incapable to learn from those corrections.</S>
      </P>
      <P>
        <S ID="S-54252">Online learning is a machine learning task where a predictor iteratively: (1) receives an input and outputs a label, (2) receives the correct label from a human and if the two labels do not match, it learns from the mistake.</S>
        <S ID="S-54253">The task of learning from user corrections at the sentence level fits well the online learning scenario, and its expected usefulness is clearly related to the amount of repetitions occurring in the text.</S>
        <S ID="S-54254">The higher the number of repetititions in a document the more the SMT system has chances to translate consistently through the use of online learning.</S>
      </P>
      <P>
        <S ID="S-54255">In this paper, we implemented two online learning methods through which a phrase-based SMT system evolves over time, sentence after sentence, by taking advantage of the post-edition or translation of the previous sentence by the user.</S>
        <S ID="S-54256">1</S>
      </P>
      <P>
        <S ID="S-54257">In the first approach, we focus on the translation model aspect of SMT which is represented by five conventional features, namely lexical and phrase translation probabilities in both directed and inverted directions, plus a phrase penalty score.</S>
        <S ID="S-54258">Translation, language and reordering models are combined in a linear fashion to obtain a score for</S>
      </P>
      <P>
        <S ID="S-54259">1 Moses code is available in the github repository.</S>
        <S ID="S-54260">https://github.com/mtresearcher/ mosesdecoder/tree/moses_onlinelearning</S>
      </P>
      <P>
        <S ID="S-54261">the translation hypothesis as shown in Equation 1.</S>
      </P>
      <P>
        <S ID="S-54262">score(e &#8727; , f) = &#931; i &#955; i h i (e &#8727; , f) (1)</S>
      </P>
      <P>
        <S ID="S-54263">where h i (&#183;) are the feature functions representing the models and &#955; i are the linear weights.</S>
        <S ID="S-54264">The highest scored translation is the best hypothesis e &#8727; output by the system.</S>
        <S ID="S-54265">We extend the translation model with a new feature which provides extra phrase-pair scores changing according to the user feedback.</S>
        <S ID="S-54266">The scores of the new feature are adapted in a discriminative fashion, by rewarding phrase-pairs observed in the search space and in the reference, and penalizing phrase-pairs observed in the search space but not in the reference.</S>
      </P>
      <P>
        <S ID="S-54267">In the second approach, we also adapt the model weights of the linear combination after each test sentence by using a margin infused relaxed algorithm (MIRA).</S>
      </P>
      <P>
        <S ID="S-54268">For assessing the robustness of our methods, we performed experiments on two datasets from different domains and language pairs (&#167;6).</S>
        <S ID="S-54269">Moreover, our online learning approaches are compared against a static baseline system and against the incremental adaptation approach proposed by Levenberg et.</S>
        <S ID="S-54270">al. (2010) (&#167;5).</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>2 Related Works</HEADER>
      <P>
        <S ID="S-54285">Several online adaptation strategies have been proposed in the past, only a few deal with adaptation of post-edited/evaluation data while most works are on adaptation over development data during tuning of parameters (Och and Ney, 2003).</S>
      </P>
      <DIV DEPTH="1">
        <HEADER>2.1 Online Adaptation during Tuning</HEADER>
        <P>
          <S ID="S-54271">Liang et.</S>
          <S ID="S-54272">al. (2006) improved SMT performance by online adaptation of scaling factors (&#955; in (1)) using averaged perceptron algorithm (Collins, 2002).</S>
          <S ID="S-54273">They presented different strategies to update the SMT models towards reference or oracle translation: (1) aggressively updating towards reference, bold update; (2) update towards the oracle translation in N-Best list, local update; (3) a hybrid approach in which a bold update is performed when the reference is reachable, otherwise a local update is performed.</S>
          <S ID="S-54274">Liang and Klein (2009) compared two online EM algorithms, stepwise online EM (Sato and Ishii, 2000; Capp&#233; and Moulines, 2007) and incremental EM (Neal and Hinton, 1998) which they use to update the alignment models (the generative component of SMT) on the fly.</S>
          <S ID="S-54275">However, stepwise EM is prone to failure if mini-batch size and stepsize parameters are not chosen correctly, while incremental EM requires substantial storage costs because it has to store sufficient statistics for each sample.</S>
          <S ID="S-54276">Other works on online minimum error rate training in SMT (Och and Ney, 2003) that deserve mentioning are (Hopkins and May, 2011; Hasler et al., 2011).</S>
        </P>
      </DIV>
      <DIV DEPTH="1">
        <HEADER>2.2 Online Adaptation during Decoding</HEADER>
        <P>
          <S ID="S-54277">Cesa-Bianchi et.</S>
          <S ID="S-54278">al. (2008) proposed an online learning approach during decoding.</S>
          <S ID="S-54279">They construct a layer of online weights over the regular feature weights and update these weights at sentence level using margin infused relaxed algorithm (Crammer and Singer, 2003); to our knowledge, this is the first work on online adaptation during decoding.</S>
          <S ID="S-54280">Mart&#237;nez-G&#243;mez et.</S>
          <S ID="S-54281">al. (2011; 2012) presented a comparison of online adaptation techniques in post editing scenario.</S>
          <S ID="S-54282">They compared different adaptation strategies on scaling factors and feature functions (respectively, &#955; and h(&#183;) in (1)).</S>
          <S ID="S-54283">However, they modified the feature values during adaptation without any normalization, which disregards the initial assumption of the feature values being probabilities.</S>
        </P>
        <P>
          <S ID="S-54284">In our approach, the value of the additional online feature can be modified during decoding without changing other feature values (probabilities) and thus preserving their probability distribution.</S>
        </P>
      </DIV>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>3 Feature Adaptation</HEADER>
      <P>
        <S ID="S-54286">In the CAT scenario, the user receives a translation suggestion for each source segment, post-edits it and finally approves it.</S>
        <S ID="S-54287">From the SMT point of view, for each source segment the decoder explores a search space of possible translations and finally returns the best scoring one (bestHyp) to the user.</S>
        <S ID="S-54288">The user possibly corrects this suggestion thus generating the final translation (postedit).</S>
        <S ID="S-54289">Our online learning procedure is based on the following idea.</S>
        <S ID="S-54290">For each N-best translation (candidate) in the search space, we compute a similarity score against the postedit using the sentence-level BLEU metric (Lin and Och, 2004), a smoothed variant of the popular BLEU metric (Papineni et al., 2001).</S>
        <S ID="S-54291">We hence compare the similarity score of each candidate against the similarity score achieved by the bestHyp, that was also computed against the postedit.</S>
        <S ID="S-54292">If the candidate</S>
      </P>
      <P>
        <S ID="S-54293">scores better than the bestHyp, then we promote the building blocks, i.e. phrase-pairs, of candidate that were not used in bestHyp and demote the phrase-pairs used in bestHyp that were not used for candidate.</S>
        <S ID="S-54294">On the contrary, if the candidate scores worse than the bestHyp, we promote the building blocks of bestHyp that are not in candidate and demote those of candidate that are not in bestHyp.</S>
        <S ID="S-54295">Our promotion/demotion mechanism could be implemented by updating the features values of the phrase pairs used in the candidate and bestHyp translations.</S>
        <S ID="S-54296">However, features in the translation models are conditional probabilities and perturbing a subset of them by also preserving their normalization constraints can be computationally expensive.</S>
        <S ID="S-54297">Instead, we propose to introduce an additional online feature which represents a goodness score of each phrase-pair in the test set.</S>
      </P>
      <P>
        <S ID="S-54298">We call the set of phrase pairs used to generate a candidate as candidate P P and the set of phrase pairs used to generate the bestHyp as best P P .</S>
        <S ID="S-54299">The online feature value of each phrase-pair is initialized to a constant and is updated according to the perceptron update (Rosenblatt, 1958) method.</S>
        <S ID="S-54300">In particular, the amount by which a current feature value is rewarded or penalized depends on a learning rate &#945; and on the difference between the model scores (i.e. h &#183; w) of candidate and bestHyp as calculated by the MT system.</S>
        <S ID="S-54301">A sketch of our online learning procedure is shown in Algorithm 1.</S>
      </P>
      <P>
        <S ID="S-54302">Algorithm 1: Online Learning</S>
      </P>
      <P>
        <S ID="S-54303">foreach sourceSeg do bestHyp = Translate(sourceSeg); postedit = Human(bestHyp); for i = 1 &#8594; iterations do</S>
      </P>
      <P>
        <S ID="S-54304">N-best=Nbest(source); foreach candidate &#8712; N-best do</S>
      </P>
      <P>
        <S ID="S-54305">sign = sgn |sBLEU(candidate) - sBLEU(bestHyp)| ; foreach phrasePair &#8712; candidate P P do</S>
      </P>
      <P>
        <S ID="S-54306">if phrasePair /&#8712; best P P then f i = f i&#8722;1 + (&#945; &#183; (&#8710;h &#183; w) &#183; sign);</S>
      </P>
      <P>
        <S ID="S-54307">end end foreach phrasePair &#8712; best P P do</S>
      </P>
      <P>
        <S ID="S-54308">if phrasePair /&#8712; candidate P P then f i = f i&#8722;1 - (&#945; &#183; (&#8710;h &#183; w) &#183; sign);</S>
      </P>
      <P>
        <S ID="S-54309">end</S>
      </P>
      <P>
        <S ID="S-54310">end</S>
      </P>
      <P>
        <S ID="S-54311">end</S>
      </P>
      <P>
        <S ID="S-54312">end end</S>
      </P>
      <P>
        <S ID="S-54313">In Algorithm 1, &#8710;h &#183; w is the above mentioned score difference as computed by the decoder; multiplied by &#945;, it is the margin, that is the value with which the online feature score (f) of the phrase pair under processing is modified.</S>
        <S ID="S-54314">We can observe that the feature scores are unbounded and could lead to instability of the algorithm; therefore, we normalise the scores through the sigmoid function:</S>
      </P>
      <P>
        <S ID="S-54315">f(x) =</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>4 Weight Adaptation</HEADER>
      <P>
        <S ID="S-54316">2 1 + exp(x) &#8722; 1 (2)</S>
      </P>
      <P>
        <S ID="S-54317">In addition to adapting the online feature values, we can also apply online adaptation on the feature weights of the linear combination (eq.</S>
        <S ID="S-54318">1).</S>
        <S ID="S-54319">In particular, after translating each sentence we can adapt the parameters depending on how good the last translation was.</S>
        <S ID="S-54320">A commonly used algorithm in this online paradigm for tuning of parameters is the Margin Infused Relaxed Algorithm (MIRA).</S>
      </P>
      <P>
        <S ID="S-54321">MIRA is an online large margin algorithm that updates the parameter &#373; of a given model according to the loss that is occurred due to incorrect classification.</S>
        <S ID="S-54322">In the case of SMT this margin can be coupled with the loss function, which in this case is the complement of the sentence level BLEU(sBLEU).</S>
        <S ID="S-54323">Thus, the loss function can be formulated as:</S>
      </P>
      <P>
        <S ID="S-54324">l(&#375;) = sBLEU(y &#8727; ) &#8722; sBLEU(&#375;) (3)</S>
      </P>
      <P>
        <S ID="S-54325">where y &#8727; is the oracle (closest translation to the reference) and &#375; is the candidate being processed.</S>
        <S ID="S-54326">Ideally, this loss should correspond to the difference between the model scores:</S>
      </P>
      <P>
        <S ID="S-54327">&#8710;h &#183; &#373; = score(y &#8727; ) &#8722; score(&#375;) (4)</S>
      </P>
      <P>
        <S ID="S-54328">MIRA is an ultraconservative algorithm, meaning that the update of the current weight vector is the smallest possible value satisfying the constraint that the variation incurred by the objective function must not be larger than the variation incurred by the model (plus a non-negative slack variable &#958;).</S>
        <S ID="S-54329">Formally, weight update at i th iteration is defined as:</S>
      </P>
      <P>
        <S ID="S-54330">w i = arg min</S>
      </P>
      <P>
        <S ID="S-54331">w</S>
      </P>
      <P>
        <S ID="S-54332">subject to</S>
      </P>
      <P>
        <S ID="S-54333">1 2&#951; ||w &#8722; w i&#8722;1|| 2</S>
      </P>
      <P>
        <S ID="S-54334">} {{ }</S>
      </P>
      <P>
        <S ID="S-54335">conservative</S>
      </P>
      <P>
        <S ID="S-54336">+ C }{{}</S>
      </P>
      <P>
        <S ID="S-54337">aggressive</S>
      </P>
      <P>
        <S ID="S-54338">&#8721;</S>
      </P>
      <P>
        <S ID="S-54339">l j &#8804; &#8710;h j &#183; w + &#958; j &#8704;j &#8712; J &#8838; {1 .</S>
        <S ID="S-54340">.</S>
        <S ID="S-54341">.</S>
        <S ID="S-54342">N} (5)</S>
      </P>
      <P>
        <S ID="S-54343">j</S>
      </P>
      <P>
        <S ID="S-54344">&#958; j</S>
      </P>
      <P>
        <S ID="S-54345">where j ranges over all candidates in the N- best list, l j is the loss between oracle and the candidate j, and &#8710;h j &#183; w is the corresponding difference in the model scores.</S>
        <S ID="S-54346">C is an aggressive parameter which controls the size of the update, &#951; is the learning rate of the algorithm and &#958; is usually a very small value (in our experiments we kept it as 0.0001).</S>
        <S ID="S-54347">After partial differentiation and linearizing the loss, equation 5 can be rewritten as:</S>
      </P>
      <P>
        <S ID="S-54348">where</S>
      </P>
      <P>
        <S ID="S-54349">w i = w i&#8722;1 + &#951; &#183; &#8721; &#945; j &#183; &#8710;h j</S>
      </P>
      <P>
        <S ID="S-54350">{ &#945; j = min C, l }</S>
      </P>
      <P>
        <S ID="S-54351">j &#8722; &#8710;h j &#183; w</S>
      </P>
      <P>
        <S ID="S-54352">||&#8710;h j || 2</S>
      </P>
      <P>
        <S ID="S-54353">j</S>
      </P>
      <P>
        <S ID="S-54354">(6)</S>
      </P>
      <P>
        <S ID="S-54355">We solve equation 5, by computing &#945; with the optimizer integrated in the Moses toolkit by (Hasler et al., 2011).</S>
        <S ID="S-54356">Algorithm 2 gives an overview of the online margin infused relaxed algorithm we implemented in Moses.</S>
      </P>
      <P>
        <S ID="S-54357">Algorithm 2: Online Margin Infused Relaxed</S>
      </P>
      <P>
        <S ID="S-54358">foreach sourceSeg do bestHyp = Translate(sourceSeg); postedit = Human(bestHyp); w 0 = w; for i = 1 &#8594; iterations do</S>
      </P>
      <P>
        <S ID="S-54359">N-best=Nbest(sourceSeg,w i&#8722;1 ); foreach candidate j &#8712; N-best do</S>
      </P>
      <P>
        <S ID="S-54360">if &#8710;h j &#183; w + &#958; j &#8805; l j then &#945; j = Optimize(l j , h j , w, C); w i = w i&#8722;1 + &#951; &#183; &#8721;j &#945; j&#8710;h j ;</S>
      </P>
      <P>
        <S ID="S-54361">end</S>
      </P>
      <P>
        <S ID="S-54362">end</S>
      </P>
      <P>
        <S ID="S-54363">end end</S>
      </P>
      <P>
        <S ID="S-54364">In the following section we overview a stream based adaptation method with which we experimentally compared our two online learning approaches as it well fits the framework we are working in.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>5 Stream based adaptation</HEADER>
      <P>
        <S ID="S-54365">Continuously updating an SMT system to an incoming stream of parallel data comes under stream based adaptation.</S>
        <S ID="S-54366">Levenberg et.</S>
        <S ID="S-54367">al. (2010) proposed an incremental adaptation technique for the core generative component of the SMT system, word alignments and language models (Levenberg and Osborne, 2009).</S>
        <S ID="S-54368">To get the word alignments on the new data they use a Stepwise online EM algorithm, where old counts (from previous alignment models) are interpolated with the new counts.</S>
        <S ID="S-54369">Since we work at the sentence level, on-thefly computation of probabilities of translation and reordering models is expensive in terms of both computational and memory requirements.</S>
        <S ID="S-54370">To save these costs, we prefer using dynamic suffix array approach described in (Levenberg et al., 2010; <REF ID="R-02" RPTR="2">Callison-Burch et al., 2005</REF>; Lopez, 2008).</S>
        <S ID="S-54371">They are used to efficiently store the source and the target corpus and alignments in efficient data structure, namely the suffix array.</S>
        <S ID="S-54372">When a phrase translation is asked by the decoder, the corpus is searched, the counts are collected and its probabilities are computed on the fly.</S>
        <S ID="S-54373">However, the current implementation in Moses of the stream based MT relying on the suffix arrays is severely limited as it allows the computation of only three translation features, namely the two direct translation probabilities and the phrase penalty.</S>
        <S ID="S-54374">This results in a significant degradation of performance.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>6 Experiments</HEADER>
      <P>
        <S ID="S-54417"></S>
      </P>
      <DIV DEPTH="1">
        <HEADER>6.1 Datasets</HEADER>
        <P>
          <S ID="S-54375">We compared our online learning approaches (Sections 3 and 4) and the stream based adaptation method (Section 5) on two datasets from different domains, namely Information Technology (IT) and TED talks, and two different language pairs.</S>
          <S ID="S-54376">The IT domain dataset is proprietary, it involves the translation of technical documents from English to Italian and has been used in the field test carried out under the MateCat project 2 .</S>
          <S ID="S-54377">Experiments are also conducted on English to French TED talks dataset (<REF ID="R-05" RPTR="3">Cettolo et al., 2012</REF>) to assess the robustness of the proposed approaches in a different scenario and to provide results on a publicly available dataset for the sake of reproducibility.</S>
          <S ID="S-54378">The training, development (dev2010) and evaluation (tst2010 3 ) sets are the same as used in the last IWSLT last evaluation campaigns.</S>
          <S ID="S-54379">In experiments on TED data, we considered the human reference translations as post edits, even if they were</S>
        </P>
        <P>
          <S ID="S-54380">2 www.matecat.com 3 As the size of evaluation set in TED data is too large with</S>
        </P>
        <P>
          <S ID="S-54381">respect to the current implementation of our algorithms, we performed evaluation on the first 200 sentences only.</S>
        </P>
        <P>
          <S ID="S-54382">actually generated from scratch.</S>
        </P>
        <P>
          <S ID="S-54383">In our experiments, the extent of usefulness of online learning highly depends on the amount of repetition of text.</S>
          <S ID="S-54384">A reasonable way to measure the quantity of repetition in each document is through the repetition rate (<REF ID="R-00" RPTR="0">Bertoldi et al., 2013</REF>).</S>
          <S ID="S-54385">It computes the rate of non-singleton n-grams, n=1...4, averaging the values over sub-samples S of thousand words from the text, and then combining the rate of each n-gram to a single score by using the geometric mean.</S>
          <S ID="S-54386">Equation 7 shows the formula for calculating the repetition rate of a document, where dict(n) represents the total number of different n-grams and n r is the number of different n-grams occurring exactly r times:</S>
        </P>
        <P>
          <S ID="S-54387">RR =</S>
        </P>
        <P>
          <S ID="S-54388">( 4&#8719;</S>
        </P>
        <P>
          <S ID="S-54389">n=1</S>
        </P>
        <P>
          <S ID="S-54390">&#8721; ) 1/4</S>
        </P>
        <P>
          <S ID="S-54391">S dict(n) &#8722; n 1</S>
        </P>
        <P>
          <S ID="S-54392">&#8721;</S>
        </P>
        <P>
          <S ID="S-54393">S dict(n) (7)</S>
        </P>
        <P>
          <S ID="S-54394">Statistics of the parallel sets and their repetition rate on both sides are reported in Table 1.</S>
        </P>
        <P>
          <S ID="S-54395">It can be noted that the repetition rates of IT and TED sets are significantly different, particularly high in IT documents, much lower in the TED talks.</S>
        </P>
      </DIV>
      <DIV DEPTH="1">
        <HEADER>6.2 Systems</HEADER>
        <P>
          <S ID="S-54396">The SMT systems were built using the Moses toolkit (Koehn et al., 2007).</S>
          <S ID="S-54397">Training data in each domain was used to create translation and lexical reordering models.</S>
          <S ID="S-54398">We created a 5-gram LM for TED talks and a 6-gram LM for the IT domain using IRSTLM (Federico et al., 2008) with improved Kneser-Ney smoothing (Chen and Goodman, 1996) on the target side of the training parallel corpora.</S>
          <S ID="S-54399">The log linear weights for the baseline systems are optimized using MERT (Och, 2003) provided in the Moses toolkit.</S>
          <S ID="S-54400">To counter the instability of MERT, we averaged the weights of three MERT runs in each case.</S>
          <S ID="S-54401">Performance is measured in terms of BLEU and TER (Snover et al., 2006) computed using the MultEval script (Clark et al., 2011).</S>
          <S ID="S-54402">Since the implementations of standard Giza and of incremental Giza combined with dynamic suffix arrays are not comparable, we constructed two baselines, a standard phrase based SMT system and an incremental Giza baseline (&#167;5).</S>
          <S ID="S-54403">Details on experimental SMT systems we built follow.</S>
        </P>
        <P>
          <S ID="S-54404">Baseline This system was built on the parallel training data for each domain.</S>
          <S ID="S-54405">We run 5 iterations of model 1, 5 of HMM (Vogel et al., 1996), 3 of model 3, 3 of model 4 (<REF ID="R-01" RPTR="1">Brown et al., 1993</REF>) using MGiza (Gao and Vogel, 2008) toolkit to align the parallel corpus at word level.</S>
          <S ID="S-54406">Translation and reordering models were built using Moses, while log-linear weights were optimized with MERT on the corresponding development sets.</S>
          <S ID="S-54407">The same IT baseline system was used in the field test of Mate- Cat and the references in the IT data are actual postedits of its translation.</S>
        </P>
        <P>
          <S ID="S-54408">IncGiza Baseline We trained alignment models with incGiza++ 4 with 5 iterations of model 1 and 10 iterations of the HMM model.</S>
          <S ID="S-54409">To build incremental Giza baselines, we used dynamic suffix arrays as implemented in Moses which allow the addition of new parallel data during decoding.</S>
          <S ID="S-54410">In the incremental Giza baseline, once a sentence of the test set is translated, the sentence pair (source and target post-edit/reference) along with the alignment provided by incGiza are added to the models.</S>
        </P>
        <P>
          <S ID="S-54411">Online learning systems We developed several online systems on top of the two aforementioned baseline systems: (1) +O employ the additional online feature (Section 3) updated with Algorithm 1; (2) +O+NS as (1) but with the online feature normalized with the sigmoid function; (3) +W weights updated (Section 4) with Algorithm 2; (4) +O+W combination of online feature and weight update; (5) +O+NS+W as system (4) with normalized online feature score.</S>
        </P>
        <P>
          <S ID="S-54412">In the online learning system we have three additional parameters: a weight for the online feature, a learning rate for features (used in the perceptron update), and a learning rate for feature weights used by MIRA.</S>
          <S ID="S-54413">These additional parameters were optimized by maximizing the BLEU</S>
        </P>
        <P>
          <S ID="S-54414">4 http://code.google.com/p/inc-giza-pp/</S>
        </P>
        <P>
          <S ID="S-54415">score on the devset and on top of already optimized feature weights.</S>
          <S ID="S-54416">For practical reasons, optimization of the parameters was run with the Simplex algorithm (Nelder and Mead, 1965).</S>
        </P>
      </DIV>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>7 Results and Discussion</HEADER>
      <P>
        <S ID="S-54418">Tables 2 and 3 collect results by the systems described in Section 6.2 on the IT and TED translation tasks, respectively.</S>
      </P>
      <P>
        <S ID="S-54419">In Table 2, the online system (1st block &#8221;+O+NS+W&#8221; system with 10 iterations of online learning) shows significant improvements, over 6 BLEU points absolute above the baseline.</S>
        <S ID="S-54420">In this case the online feature can clearly take advantage of the high repetition rates observed in the IT dev and test sets (Table 1).</S>
        <S ID="S-54421">Similarly, in the second block, the online system (2nd block &#8221;+O+NS+W&#8221; with 10 iterations of online learning) outperforms IncGiza baseline, too.</S>
        <S ID="S-54422">It is interesting to note that by continuously updating the baseline system after each translation step, even the plain translation models are capable to learn from the correction in the post-edited text.</S>
      </P>
      <P>
        <S ID="S-54423">Figure 1 depicts learning curve of Baseline system, &#8220;+O+NS&#8221; (referred as +online feature) and &#8220;+O+NS+W&#8221; (referred as +MIRA).</S>
        <S ID="S-54424">We plotted incremental BLEU scores after translation of each sentence, thereby the last point on the plot shows the corpus level BLEU on the whole test set.</S>
      </P>
      <P>
        <S ID="S-54425">In Table 3, from the first block we can observe that online learning systems perform only slightly better than the baseline systems, the main reason being the low repetition rate observed in the evaluation set (as shown in Table 1).</S>
        <S ID="S-54426">The positive results observed in the second block (&#8221;+O+W&#8221; with 10 iterations) are probably due to the larger room for improvement available for translation models implemented with dynamic suffix arrays, as they only incorporate 3 features instead of 5.</S>
        <S ID="S-54427">Sometimes, online learning systems show worse results with higher numbers of iterations, which seems due to overfitting.</S>
        <S ID="S-54428">It is also interesting to notice that after optimization the weight value of the online feature was 0.509 for the IT task and 0.072 for the TED talk task.</S>
        <S ID="S-54429">This confirms the different use and potential assigned to the online feature by the SMT systems in the two tasks.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>8 Conclusion</HEADER>
      <P>
        <S ID="S-54430">We have shown a new way to update the translation model on the fly without changing the original probability distribution.</S>
        <S ID="S-54431">We empirically proved that this method is robust and works for different domain datasets be it Information Technology or TED talks.</S>
        <S ID="S-54432">In addition, if the repetition rate is high in the text, online learning works much better than if the rate is low.</S>
        <S ID="S-54433">We tested both with an unbounded and a bounded range on the online feature and found out that bounded values produce more stable and consistent results.</S>
        <S ID="S-54434">From previous works, it has been proven that MIRA works well with sparse features too, so, as for the future plan we would like to treat each phrase pair as a sparse feature and tune the sparse weights using MIRA.</S>
        <S ID="S-54435">From the results, it is evident that we have not used any sort of stopping criterion for online learning; a random of 1, 5 and 10 iterations were chosen in a naive way.</S>
        <S ID="S-54436">Our future plan will extend to working on finding a stopping criterion for online learning process.</S>
      </P>
    </DIV>
  </BODY>
  <ACKNOWLEDGMENTS>
    <P>
      <S ID="S-54437">This work was supported by the MateCat project, which is funded by the EC under the 7 th Framework Programme.</S>
    </P>
  </ACKNOWLEDGMENTS>
  <REFERENCES>
    <REFERENCE ID="0">
      <RAUTHOR>N Bertoldi</RAUTHOR>
      <REFTITLE>Cache-based online adaptation for machine translation enhanced computer assisted translation.</REFTITLE>
      <DATE>2013</DATE>
    </REFERENCE>
    <REFERENCE ID="1">
      <RAUTHOR>P F Brown</RAUTHOR>
      <REFTITLE>The mathematics of statistical machine translation: Parameter estimation.</REFTITLE>
      <DATE>1993</DATE>
    </REFERENCE>
    <REFERENCE ID="2">
      <RAUTHOR>C Callison-Burch</RAUTHOR>
      <REFTITLE>Scaling phrase-based statistical machine translation to larger corpora and longer phrases.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="3">
      <RAUTHOR>O Capp&#233;</RAUTHOR>
      <REFTITLE>Online EM algorithm for latent data models.</REFTITLE>
      <DATE>2009</DATE>
    </REFERENCE>
    <REFERENCE ID="4">
      <RAUTHOR>N Cesa-Bianchi</RAUTHOR>
      <REFTITLE>Online learning algorithms for computer-assisted translation.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
    <REFERENCE ID="5">
      <RAUTHOR>M Cettolo</RAUTHOR>
      <REFTITLE>web inventory of transcribed and translated talks.</REFTITLE>
      <DATE>2012</DATE>
    </REFERENCE>
  </REFERENCES>
</PAPER>
