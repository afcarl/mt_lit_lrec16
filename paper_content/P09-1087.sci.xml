<PAPER>
  <FILENO/>
  <TITLE>Quadratic-Time Dependency Parsing for Machine Translation</TITLE>
  <AUTHORS>
    <AUTHOR>Michel Galley</AUTHOR>
  </AUTHORS>
  <ABSTRACT>
    <A-S ID="S-27170">Efficiency is a prime concern in syntactic MT decoding, yet significant developments in statistical parsing with respect to asymptotic efficiency haven&#8217;t yet been explored in MT.</A-S>
    <A-S ID="S-27171">Recently, <REF ID="R-19" RPTR="35">McDonald et al. (2005</REF><REF ID="R-20" RPTR="49">McDonald et al. (2005</REF>b) formalized dependency parsing as a maximum spanning tree (MST) problem, which can be solved in quadratic time relative to the length of the sentence.</A-S>
    <A-S ID="S-27172">They show that MST parsing is almost as accurate as cubic-time dependency parsing in the case of English, and that it is more accurate with free word order languages.</A-S>
    <A-S ID="S-27173">This paper applies MST parsing to MT, and describes how it can be integrated into a phrase-based decoder to compute dependency language model scores.</A-S>
    <A-S ID="S-27174">Our results show that augmenting a state-ofthe-art phrase-based system with this dependency language model leads to significant improvements in TER (0.92%) and BLEU (0.45%) scores on five NIST Chinese-English evaluation test sets.</A-S>
  </ABSTRACT>
  <BODY>
    <DIV DEPTH="0">
      <HEADER>1 Introduction</HEADER>
      <P>
        <S ID="S-27175">Hierarchical approaches to machine translation have proven increasingly successful in recent years (<REF ID="R-03" RPTR="3">Chiang, 2005</REF>; <REF ID="R-18" RPTR="23">Marcu et al., 2006</REF>; <REF ID="R-30" RPTR="62">Shen et al., 2008</REF>), and often outperform phrase-based systems (<REF ID="R-22" RPTR="53">Och and Ney, 2004</REF>; <REF ID="R-16" RPTR="20">Koehn et al., 2003</REF>) on target-language fluency and adequacy.</S>
        <S ID="S-27176">However, their benefits generally come with high computational costs, particularly when chart parsing, such as CKY, is integrated with language models of high orders (<REF ID="R-37" RPTR="72">Wu, 1996</REF>).</S>
        <S ID="S-27177">Indeed, synchronous CFG parsing with m-grams runs in O(n 3m ) time, where n is the length of the sentence.</S>
        <S ID="S-27178">1</S>
      </P>
      <P>
        <S ID="S-27179">Furthermore, synchronous CFG approaches often only marginally outperform the most com-</S>
      </P>
      <P>
        <S ID="S-27180">1 The algorithmic complexity of (<REF ID="R-37" RPTR="73">Wu, 1996</REF>) is</S>
      </P>
      <P>
        <S ID="S-27181">O(n 3+4(m&#8722;1) ), though <REF ID="R-14" RPTR="18">Huang et al. (2005)</REF> present a more efficient factorization inspired by (<REF ID="R-09" RPTR="10">Eisner and Satta, 1999</REF>) that yields an overall complexity of O(n 3+3(m&#8722;1) ), i.e., O(n 3m ).</S>
        <S ID="S-27182">In comparison, phrase-based decoding can run in linear time if a distortion limit is imposed.</S>
        <S ID="S-27183">Of course, this comparison holds only for approximate algorithms.</S>
        <S ID="S-27184">Since exact MT decoding is NP complete (<REF ID="R-15" RPTR="19">Knight, 1999</REF>), there is no exact search algorithm for either phrase-based or syntactic MT that runs in polynomial time (unless P = NP).</S>
      </P>
      <P>
        <S ID="S-27185">petitive phrase-based systems in large-scale experiments such as NIST evaluations.</S>
        <S ID="S-27186">2 This lack of significant difference may not be completely surprising.</S>
        <S ID="S-27187">Indeed, researchers have shown that gigantic language models are key to state-ofthe-art performance (<REF ID="R-01" RPTR="1">Brants et al., 2007</REF>), and the ability of phrase-based decoders to handle large-size, high-order language models with no consequence on asymptotic running time during decoding presents a compelling advantage over CKY decoders, whose time complexity grows prohibitively large with higher-order language models.</S>
      </P>
      <P>
        <S ID="S-27188">While context-free decoding algorithms (CKY, Earley, etc.) may sometimes appear too computationally expensive for high-end statistical machine translation, there are many alternative parsing algorithms that have seldom been explored in the machine translation literature.</S>
        <S ID="S-27189">The parsing literature presents faster alternatives for both phrasestructure and dependency trees, e.g., O(n) shiftreduce parsers and variants ((<REF ID="R-28" RPTR="61">Ratnaparkhi, 1997</REF>; <REF ID="R-21" RPTR="52">Nivre, 2003</REF>), inter alia).</S>
        <S ID="S-27190">While deterministic parsers are often deemed inadequate for dealing with ambiguities of natural language, highly accurate O(n 2 ) algorithms exist in the case of dependency parsing.</S>
        <S ID="S-27191">Building upon the theoretical work of (<REF ID="R-04" RPTR="4">Chu and Liu, 1965</REF>; <REF ID="R-08" RPTR="8">Edmonds, 1967</REF>), <REF ID="R-19" RPTR="36">McDonald et al. (2005</REF><REF ID="R-20" RPTR="50">McDonald et al. (2005</REF>b) present a quadratic-time dependency parsing algorithm that is just 0.7% less accurate than &#8220;full-fledged&#8221; chart parsing (which, in the case of dependency parsing, runs in time O(n 3 ) (<REF ID="R-10" RPTR="13">Eisner, 1996</REF>)).</S>
      </P>
      <P>
        <S ID="S-27192">In this paper, we show how to exploit syntactic dependency structure for better machine translation, under the constraint that the depen-</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>2 Results of the 2008 NIST Open MT evaluation</HEADER>
      <P>
        <S ID="S-27256">(http://www.itl.nist.gov/iad/mig/tests/mt/2008/doc/ mt08_official_results_v0.html) reveal that, while many of</S>
      </P>
      <P>
        <S ID="S-27257">the best systems in the Chinese-English and Arabic-English tasks incorporate synchronous CFG models, score differences with the best phrase-based system were insignificantly small.</S>
      </P>
      <P>
        <S ID="S-27258">dency structure is built as a by-product of phrasebased decoding, without reliance on a dynamicprogramming or chart parsing algorithm such as CKY or Earley.</S>
        <S ID="S-27259">Adapting the approach of Mc- Donald et al. (2005b) for machine translation, we incrementally build dependency structure left-toright in time O(n 2 ) during decoding.</S>
        <S ID="S-27260">Most interestingly, the time complexity of non-projective dependency parsing remains quadratic as the order of the language model increases.</S>
        <S ID="S-27261">This provides a compelling advantage over previous dependency language models for MT (<REF ID="R-30" RPTR="63">Shen et al., 2008</REF>), which use a 5-gram LM only during reranking.</S>
        <S ID="S-27262">In our experiments, we build a competitive baseline (<REF ID="R-17" RPTR="21">Koehn et al., 2007</REF>) incorporating a 5-gram LM trained on a large part of Gigaword and show that our dependency language model provides improvements on five different test sets, with an overall gain of 0.92 in TER and 0.45 in BLEU scores.</S>
        <S ID="S-27263">These results are found to be statistically very significant (p &#8804; .01).</S>
      </P>
      <P>
        <S ID="S-27264">2 Dependency parsing for machine translation</S>
      </P>
      <P>
        <S ID="S-27265">In this section, we review dependency parsing formulated as a maximum spanning tree problem (<REF ID="R-19" RPTR="24">McDonald et al., 2005</REF><REF ID="R-20" RPTR="38">McDonald et al., 2005</REF>b), which can be solved in quadratic time, and then present its adaptation and novel application to phrase-based decoding.</S>
      </P>
      <P>
        <S ID="S-27266">Dependency models have recently gained considerable interest in many NLP applications, including machine translation (<REF ID="R-07" RPTR="7">Ding and Palmer, 2005</REF>; <REF ID="R-27" RPTR="60">Quirk et al., 2005</REF>; <REF ID="R-30" RPTR="64">Shen et al., 2008</REF>).</S>
        <S ID="S-27267">Dependency structure provides several compelling advantages compared to other syntactic representations.</S>
        <S ID="S-27268">First, dependency links are close to the semantic relationships, which are more likely to be consistent across languages.</S>
        <S ID="S-27269">Indeed, <REF ID="R-11" RPTR="15">Fox (2002)</REF> found inter-lingual phrasal cohesion to be greater than for a CFG when using a dependency representation, for which she found only 12.6% of head crossings and 9.2% modifier crossings.</S>
        <S ID="S-27270">Second, dependency trees contain exactly one node per word, which contributes to cutting down the search space during parsing: indeed, the task of the parser is merely to connect existing nodes rather than hypothesizing new ones.</S>
        <S ID="S-27271">Finally, dependency models are more flexible and account for (non-projective) head-modifier relations that CFG models fail to represent adequately, which is problematic with certain types of grammatical constructions and with free word order languages,</S>
      </P>
      <P>
        <S ID="S-27272">&lt;root&gt; &lt;root&gt;</S>
      </P>
      <P>
        <S ID="S-27273">0</S>
      </P>
      <P>
        <S ID="S-27274">as we will see later in this section.</S>
      </P>
      <P>
        <S ID="S-27275">The most standardly used algorithm for parsing with dependency grammars is presented in (<REF ID="R-10" RPTR="14">Eisner, 1996</REF>; <REF ID="R-09" RPTR="11">Eisner and Satta, 1999</REF>).</S>
        <S ID="S-27276">It runs in time O(n 3 ), where n is the length of the sentence.</S>
        <S ID="S-27277">Their algorithm exploits the special properties of dependency trees to reduce the worst-case complexity of bilexical parsing, which otherwise requires O(n 4 ) for bilexical constituency-based parsing.</S>
        <S ID="S-27278">While it seems difficult to improve the asymptotic running time of the Eisner algorithm beyond what is presented in (<REF ID="R-09" RPTR="12">Eisner and Satta, 1999</REF>), <REF ID="R-19" RPTR="37">McDonald et al. (2005</REF><REF ID="R-20" RPTR="51">McDonald et al. (2005</REF>b) show O(n 2 )-time parsing is possible if trees are not required to be projective.</S>
        <S ID="S-27279">This relaxation entails that dependencies may cross each other rather than being required to be nested, as shown in Fig.</S>
        <S ID="S-27280">1.</S>
        <S ID="S-27281">More formally, a non-projective tree is any tree that does not satisfy the following definition of a projective tree:</S>
      </P>
      <P>
        <S ID="S-27282">Definition.</S>
        <S ID="S-27283">Let x = x 1 &#183;&#183;&#183;x n be an input sentence, and let y be a rooted tree represented as a set in which each element (i, j) &#8712; y is an ordered pair of word indices of x that defines a dependency relation between a head x i and a modifier x j .</S>
        <S ID="S-27284">By definition, the tree y is said to be projective if each dependency (i, j) satisfies the following property: each word in x i+1 &#183;&#183;&#183;x j&#8722;1 (if i &lt; j) or in x j+1 &#183;&#183;&#183;x i&#8722;1 (if j &lt; i) is a descendent of head word x i .</S>
      </P>
      <P>
        <S ID="S-27285">This relaxation is key to computational efficiency, since the parser does not need to keep track of whether dependencies assemble into contiguous spans.</S>
        <S ID="S-27286">It is also linguistically desirable in the case of free word order languages such as Czech, Dutch, and German.</S>
        <S ID="S-27287">Non-projective dependency structures are sometimes even needed for languages like English, e.g., in the case of the wh-movement shown in Fig.</S>
        <S ID="S-27288">1.</S>
        <S ID="S-27289">For languages</S>
      </P>
      <P>
        <S ID="S-27290">with relatively rigid word order such as English, there may be some concern that searching the space of non-projective dependency trees, which is considerably larger than the space of projective dependency trees, would yield poor performance.</S>
        <S ID="S-27291">That is not the case: dependency accuracy for nonprojective parsing is 90.2% for English (<REF ID="R-19" RPTR="25">McDonald et al., 2005</REF><REF ID="R-20" RPTR="39">McDonald et al., 2005</REF>b), only 0.7% lower than a projective parser (<REF ID="R-19" RPTR="26">McDonald et al., 2005</REF><REF ID="R-20" RPTR="40">McDonald et al., 2005</REF>a) that uses the same set of features and learning algorithm.</S>
        <S ID="S-27292">In the case of dependency parsing for Czech, (<REF ID="R-19" RPTR="27">McDonald et al., 2005</REF><REF ID="R-20" RPTR="41">McDonald et al., 2005</REF>b) even outperforms projective parsing, and was one of the top systems in the CoNLL-06 shared task in multilingual dependency parsing.</S>
      </P>
      <DIV DEPTH="1">
        <HEADER>2.1 O(n 2 )-time dependency parsing for MT</HEADER>
        <P>
          <S ID="S-27193">We now formalize weighted non-projective dependency parsing similarly to (<REF ID="R-19" RPTR="28">McDonald et al., 2005</REF><REF ID="R-20" RPTR="42">McDonald et al., 2005</REF>b) and then describe a modified and more efficient version that can be integrated into a phrasebased decoder.</S>
        </P>
        <P>
          <S ID="S-27194">Given the single-head constraint, parsing an input sentence x = (x 0 ,x 1 ,&#183;&#183;&#183; ,x n ) is reduced to labeling each word x j with an index i identifying its head word x i .</S>
          <S ID="S-27195">We include the dummy root symbol x 0 = &#12296;root&#12297; so that each word can be a modifier.</S>
          <S ID="S-27196">We score each dependency relation using a standard linear model</S>
        </P>
        <P>
          <S ID="S-27197">s(i, j) = &#955; &#183; f(i, j) (1)</S>
        </P>
        <P>
          <S ID="S-27198">whose weight vector &#955; is trained using MIRA (<REF ID="R-05" RPTR="6">Crammer and Singer, 2003</REF>) to optimize dependency parsing accuracy (<REF ID="R-19" RPTR="29">McDonald et al., 2005</REF><REF ID="R-20" RPTR="43">McDonald et al., 2005</REF>a).</S>
          <S ID="S-27199">As is commonly the case in statistical parsing, the score of the full tree is decomposed as the sum of the score of all edges:</S>
        </P>
        <P>
          <S ID="S-27200">s(x,y) =</S>
        </P>
        <P>
          <S ID="S-27201">&#8721;</S>
        </P>
        <P>
          <S ID="S-27202">(i, j)&#8712;y</S>
        </P>
        <P>
          <S ID="S-27203">&#955; &#183; f(i, j) (2)</S>
        </P>
        <P>
          <S ID="S-27204">When there is no need to ensure projectivity, one can independently select the highest scoring edge (i, j) for each modifier x j , yet we generally want to ensure that the resulting structure is a tree, i.e., that it does not contain any circular dependencies.</S>
          <S ID="S-27205">This optimization problem is a known instance of the maximum spanning tree (MST) problem.</S>
          <S ID="S-27206">In our case, the graph is directed&#8212;indeed, the equality s(i, j) = s( j,i) is generally not true and would be linguistically aberrant&#8212;so the problem constitutes an instance of the less-known MST problem for directed graphs.</S>
          <S ID="S-27207">This problem is solved with the</S>
        </P>
        <P>
          <S ID="S-27208">Chu-Liu-Edmonds (CLE) algorithm (<REF ID="R-04" RPTR="5">Chu and Liu, 1965</REF>; <REF ID="R-08" RPTR="9">Edmonds, 1967</REF>).</S>
        </P>
        <P>
          <S ID="S-27209">Formally, we represent the graph G = (V,E) with a vertex set V = x = {x 0 ,&#183;&#183;&#183; ,x n } and a set of directed edges E = [0,n] &#215; [1,n], in which each edge (i, j), representing the dependency x i &#8594; x j , is assigned a score s(i, j).</S>
          <S ID="S-27210">Finding the spanning tree y &#8834; E rooted at x 0 that maximizes s(x,y) as defined in Equation 2 has a straightforward solution in O(n 2 log(n)) time for dense graphs such as G, though <REF ID="R-33" RPTR="67">Tarjan (1977)</REF> shows that the problem can be solved in O(n 2 ).</S>
          <S ID="S-27211">Hence, non-projective dependency parsing is solved in quadratic time.</S>
          <S ID="S-27212">The main idea behind the CLE algorithm is to first greedily select for each word x j the incoming edge (i, j) with highest score, then to successively repeat the following two steps: (a) identify a loop in the graph, and if there is none, halt; (b) contract the loop into a single vertex, and update scores for edges coming in and out of the loop.</S>
          <S ID="S-27213">Once all loops have been eliminated, the algorithm maps back the maximum spanning tree of the contracted graph onto the original graph G, and it can be shown that this yields a spanning tree that is optimal with respect to G and s (<REF ID="R-12" RPTR="16">Georgiadis, 2003</REF>).</S>
          <S ID="S-27214">The greedy approach of selecting the highest scoring edge (i, j) for each modifier x j can easily be applied left-to-right during phrase-based decoding, which proceeds in the same order.</S>
          <S ID="S-27215">For each hypothesis expansion, our decoder generates the following information for the new hypothesis h:</S>
        </P>
        <P>
          <S ID="S-27216">&#8226; a partial translation x; &#8226; a coverage set of input words c; &#8226; a translation score &#963;.</S>
        </P>
        <P>
          <S ID="S-27217">In the case of non-projective dependency parsing, we need to maintain additional information for each word x j of the partial translation x:</S>
        </P>
        <P>
          <S ID="S-27218">&#8226; a predicted POS tag t j ; &#8226; a dependency score s j .</S>
        </P>
        <P>
          <S ID="S-27219">Dependency scores s j are initialized to &#8722;&#8734;.</S>
          <S ID="S-27220">Each time a new word is added to a partial hypothesis, the decoder executes the routine shown in Table 1.</S>
          <S ID="S-27221">To avoid cluttering the pseudo-code, we make here the simplifying assumption that each hypothesis expansion adds exactly one word, though the real implementation supports the case of phrases of any length.</S>
          <S ID="S-27222">Line 3 determines whether the translation hypothesis is complete, in which case it explicitly builds the graph G and</S>
        </P>
        <P>
          <S ID="S-27223">Decoding: hypothesis expansion step.</S>
        </P>
        <P>
          <S ID="S-27224">1.</S>
          <S ID="S-27225">Inferer generates new hypothesis h = (x, c, &#963;) 2. j &#8592; |x| &#8722; 1 3. t j &#8592; tagger(x j&#8722;3 ,&#183;&#183;&#183; ,x j ) 4. if complete(c) 5.</S>
          <S ID="S-27226">Chu-Liu-Edmonds(h) 6. else 7. for i = 1 to j 8. s j = max(s j ,s(i, j)) 9. s i = max(s i ,s( j,i))</S>
        </P>
        <P>
          <S ID="S-27227">finds the maximum spanning tree.</S>
          <S ID="S-27228">Note that it is impractical to identify loops each time a new word is added to a translation hypothesis, since this requires explicitly storing the dense graph G, which would require an O(n 2 ) copy operation during each hypothesis expansion; this would of course increase time and space complexity (the max operation in lines 8 and 9 only keeps the current best scoring edges).</S>
          <S ID="S-27229">If there is any loop, the dependency score is adjusted in the last hypothesis expansion.</S>
          <S ID="S-27230">In practice, we delay the computation of dependency scores involving word x j until tag t j+1 is generated, since dependency parsing accuracy is particularly low (&#8722;0.8%) when the next tag is unknown.</S>
        </P>
        <P>
          <S ID="S-27231">We found that dependency scores with or without loop elimination are generally close and highly correlated, and that MT performance without final loop removal was about the same (generally less than 0.2% BLEU).</S>
          <S ID="S-27232">While it seems that loopy graphs are undesirable when the goal is to obtain a syntactic analysis, that is not necessarily the case when one just needs a language modeling score.</S>
        </P>
      </DIV>
      <DIV DEPTH="1">
        <HEADER>2.2 Features for dependency parsing</HEADER>
        <P>
          <S ID="S-27233">In our experiments, we use sets of features that are similar to the ones used in the McDonald parser, though we make a key modification that yields an asymptotic speedup that ensures a genuine O(n 2 ) running time.</S>
        </P>
        <P>
          <S ID="S-27234">The three feature sets that were used in our experiments are shown in Table 2.</S>
          <S ID="S-27235">We write h-word,</S>
        </P>
        <P>
          <S ID="S-27236">h-pos, m-word, m-pos to refer to head and modifier words and POS tags, and append a numerical value to shift the word offset either to the left or to the right (e.g., h-pos+1 is the POS to the right of the head word).</S>
          <S ID="S-27237">We use the symbol &#8743; to represent feature conjunctions.</S>
          <S ID="S-27238">Each feature in the table has a distinct identifier, so that, e.g., the POS features</S>
        </P>
        <P>
          <S ID="S-27239">Unigram features: h-word, h-pos, h-word &#8743; h-pos, m-word, m-pos, m-word &#8743; m-pos Bigram features: h-word &#8743; m-word, h-pos &#8743; m-pos, h-word &#8743; h-pos &#8743; m-word, h-word &#8743; h-pos &#8743; m-pos, m-word &#8743; m-pos &#8743; h-word, m-word &#8743; m-pos &#8743; h-pos, h-word &#8743; h-pos &#8743; m-word &#8743; m-pos Adjacent POS features: h-pos &#8743; h-pos+1 &#8743; m-pos&#8722;1 &#8743; m-pos, h-pos &#8743; h-pos+1 &#8743; m-pos &#8743; m-pos+1, h-pos&#8722;1 &#8743; h-pos &#8743; m-pos&#8722;1 &#8743; m-pos, h-pos&#8722;1 &#8743; h-pos &#8743; m-pos &#8743; m-pos+1 In-between POS features: if i &lt; j:</S>
        </P>
        <P>
          <S ID="S-27240">h-pos &#8743; h-pos+k &#8743; m-pos k &#8712; [i,min(i + 5, j)] h-pos &#8743; m-pos&#8722;k &#8743; m-pos k &#8712; [max(i, j &#8722; 5), j ] if i &gt; j:</S>
        </P>
        <P>
          <S ID="S-27241">m-pos &#8743; m-pos+k &#8743; h-pos k &#8712; [ j,min( j + 5,i)] m-pos &#8743; h-pos&#8722;k &#8743; h-pos k &#8712; [max( j,i &#8722; 5),i]</S>
        </P>
        <P>
          <S ID="S-27242">h-pos are all distinct from m-pos features.</S>
          <S ID="S-27243">3</S>
        </P>
        <P>
          <S ID="S-27244">The primary difference between our feature sets and the ones of McDonald et al. is that their set of &#8220;in between POS features&#8221; includes the set of all tags appearing between each pair of words.</S>
          <S ID="S-27245">Extracting all these tags takes time O(n) for any arbitrary pair (i, j).</S>
          <S ID="S-27246">Since i and j are both free variables, feature computation in (<REF ID="R-19" RPTR="30">McDonald et al., 2005</REF><REF ID="R-20" RPTR="44">McDonald et al., 2005</REF>b) takes time O(n 3 ), even though parsing itself takes O(n 2 ) time.</S>
          <S ID="S-27247">To make our parser genuinely O(n 2 ), we modified the set of in-between POS features in two ways.</S>
          <S ID="S-27248">First, we restrict extraction of in-between POS tags to those words that appear within a window of five words relative to either the head or the modifier.</S>
          <S ID="S-27249">While this change alone ensures that feature extraction is now O(1) for each word pair, this causes a fairly high drop of performance (dependency accuracy</S>
        </P>
        <P>
          <S ID="S-27250">3 In addition to these basic features, we follow McDonald</S>
        </P>
        <P>
          <S ID="S-27251">in conjoining most features with two extra pieces of information: a boolean variable indicating whether the modifier attaches to the left or to the right, and the binned distance between the two words.</S>
        </P>
        <P>
          <S ID="S-27252">on our test was down 0.9%).</S>
          <S ID="S-27253">To make our genuinely O(n 2 ) parser almost as accurate as the nonprojective parser of McDonald et al., we conjoin each in-between POS with its position relative to (i, j).</S>
          <S ID="S-27254">This relatively simple change reduces the drop in accuracy to only 0.34%.</S>
          <S ID="S-27255">4</S>
        </P>
      </DIV>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>3 Dependency parsing experiments</HEADER>
      <P>
        <S ID="S-27293">In this section, we compare the performance of our parsing model to the ones of McDonald et al.</S>
        <S ID="S-27294">Since our MT test sets include newswire, web, and audio, we trained our parser on different genres.</S>
        <S ID="S-27295">Our training data includes newswire from the English translation treebank (LDC2007T02) and the English-Arabic Treebank (LDC2006T10), which are respectively translations of sections of the Chinese treebank (CTB) and Arabic treebank (ATB).</S>
        <S ID="S-27296">We also trained the parser on the broadcastnews treebank available in the OntoNotes corpus (LDC2008T04), and added sections 02-21 of the WSJ Penn treebank.</S>
        <S ID="S-27297">Documents 001-040 of the English CTB data were set aside to constitute a test set for newswire texts.</S>
        <S ID="S-27298">Our other test set is the standard Section 23 of the Penn treebank.</S>
        <S ID="S-27299">The splits and amounts of data used for training are displayed in Table 3.</S>
      </P>
      <P>
        <S ID="S-27300">Parsing experiments are shown in Table 4.</S>
        <S ID="S-27301">We</S>
      </P>
      <P>
        <S ID="S-27302">4 We need to mention some practical considerations that</S>
      </P>
      <P>
        <S ID="S-27303">make feature computation fast enough for MT.</S>
        <S ID="S-27304">Most features are precomputed before actual decoding.</S>
        <S ID="S-27305">All target-language words to appear during beam search can be determined in advance, and all their unigram feature scores are precomputed.</S>
        <S ID="S-27306">For features conditioned on both head and modifier, scores are cached whenever possible.</S>
        <S ID="S-27307">The only features that are not cached are the ones that include contextual POS tags, since their miss rate is relatively high.</S>
      </P>
      <P>
        <S ID="S-27308">distinguish two experimental conditions: Parsing and MT.</S>
        <S ID="S-27309">For Parsing, sentences are cased and tokenization abides to the PTB segmentation as used in the Penn treebank version 3.</S>
        <S ID="S-27310">For the MT setting, texts are all lower case, and tokenization was changed to improve machine translation (e.g., most hyphenated words were split).</S>
        <S ID="S-27311">For this setting, we also had to harmonize the four treebanks.</S>
        <S ID="S-27312">The most crucial modification was to add NP internal bracketing to the WSJ (<REF ID="R-35" RPTR="69">Vadas and Curran, 2007</REF>), since the three other treebanks contain that information.</S>
        <S ID="S-27313">Treebanks were also transformed to be consistent with MT tokenization.</S>
        <S ID="S-27314">We evaluate</S>
      </P>
      <P>
        <S ID="S-27315">MT parsing models on CTB rather than on WSJ,</S>
      </P>
      <P>
        <S ID="S-27316">since CTB contains newswire and is thus more representative of MT evaluation conditions.</S>
      </P>
      <P>
        <S ID="S-27317">To obtain part-of-speech tags, we use a state-of-the-art maximum-entropy (CMM) tagger (<REF ID="R-34" RPTR="68">Toutanova et al., 2003</REF>).</S>
        <S ID="S-27318">In the Parsing setting, we use its best configuration, which reaches a tagging accuracy of 97.25% on standard WSJ test data.</S>
        <S ID="S-27319">In the MT setting, we need to use a less effective tagger, since we cannot afford to perform Viterbi inference as a by-product of phrase-based decoding.</S>
        <S ID="S-27320">Hence, we use a simpler tagging model that assigns tag t i to word x i by only using features of words x i&#8722;3 &#183;&#183;&#183;x i , and that does not condition any decision based on any preceding or next tags (t i&#8722;1 , etc.).</S>
        <S ID="S-27321">Its performance is 95.02% on the WSJ, and 95.30% on the English CTB.</S>
        <S ID="S-27322">Additional experiments reveal two main contributing factors to this drop on WSJ: tagging uncased texts reduces tagging accuracy by about 1%, and using only wordbased features further reduces it by 0.6%.</S>
      </P>
      <P>
        <S ID="S-27323">Table 4 shows that the accuracy of our truly</S>
      </P>
      <P>
        <S ID="S-27324">O(n 2 ) parser is only .25% to .34% worse than the O(n 3 ) implementation of (<REF ID="R-19" RPTR="31">McDonald et al., 2005</REF><REF ID="R-20" RPTR="45">McDonald et al., 2005</REF>b).</S>
        <S ID="S-27325">5 Compared to the state-of-the-art projective parser as implemented in (<REF ID="R-19" RPTR="32">McDonald et al., 2005</REF><REF ID="R-20" RPTR="46">McDonald et al., 2005</REF>a), performance is 1.28% lower on WSJ, but only 0.95% when training on all our available data and using the MT setting.</S>
        <S ID="S-27326">Overall, we believe that the drop of performance is a reasonable price to pay considering the computational constraints imposed by integrating the dependency parser into an MT decoder.</S>
      </P>
      <P>
        <S ID="S-27327">The table also shows a gain of more than 1% in dependency accuracy by adding ATB, OntoNotes, and WSJ to the English CTB training set.</S>
        <S ID="S-27328">The four sources were assigned non-uniform weights: we set the weight of the CTB data to be 10 times larger than the other corpora, which seems to work best in our parsing experiments.</S>
        <S ID="S-27329">While this improvement of 1% may seem relatively small considering that the amount of training data is more than 20 times larger in the latter case, it is quite consistent with previous findings in domain adaptation, which is known to be a difficult task.</S>
        <S ID="S-27330">For example, (Daume III, 2007) shows that training a learning algorithm on the weighted union of different data sets (which is basically what we did) performs almost as well as more involved domain adaptation approaches.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>4 Machine translation experiments</HEADER>
      <P>
        <S ID="S-27331">In our experiments, we use a re-implementation of the Moses phrase-based decoder (<REF ID="R-17" RPTR="22">Koehn et al., 2007</REF>).</S>
        <S ID="S-27332">We use the standard features implemented almost exactly as in Moses: four translation features (phrase-based translation probabilities and lexically-weighted probabilities), word penalty, phrase penalty, linear distortion, and language model score.</S>
        <S ID="S-27333">We also incorporated the lexicalized reordering features of Moses, in order to experiment with a baseline that is stronger than the default Moses configuration.</S>
      </P>
      <P>
        <S ID="S-27334">The language pair for our experiments is Chinese-to-English.</S>
        <S ID="S-27335">The training data consists of about 28 million English words and 23.3 million</S>
      </P>
      <P>
        <S ID="S-27336">5 Note that our results on WSJ are not exactly the same</S>
      </P>
      <P>
        <S ID="S-27337">as those reported in (<REF ID="R-19" RPTR="33">McDonald et al., 2005</REF><REF ID="R-20" RPTR="47">McDonald et al., 2005</REF>b), since we used slightly different head finding rules.</S>
        <S ID="S-27338">To extract dependencies from treebanks, we used the LTH Penn Converter (http:// nlp.cs.lth.se/pennconverter/), which extracts dependencies that are almost identical to those used for the CoNLL-2008 Shared Task.</S>
        <S ID="S-27339">We constrain the converter not to use functional tags found in the treebanks, in order to make it possible to use automatically parsed texts (i.e., perform selftraining) in future work.</S>
      </P>
      <P>
        <S ID="S-27340">Chinese words drawn from various news parallel corpora distributed by the Linguistic Data Consortium (LDC).</S>
        <S ID="S-27341">In order to provide experiments comparable to previous work, we used the same corpora as (<REF ID="R-36" RPTR="71">Wang et al., 2007</REF>): LDC2002E18, LDC2003E07, LDC2003E14, LDC2005E83, LDC2005T06, LDC2006E26, LDC2006E8, and LDC2006G05.</S>
        <S ID="S-27342">Chinese words were automatically segmented with a conditional random field (CRF) classifier (<REF ID="R-02" RPTR="2">Chang et al., 2008</REF>) that conforms to the Chinese Treebank (CTB) standard.</S>
      </P>
      <P>
        <S ID="S-27343">In order to train a competitive baseline given our computational resources, we built a large 5-gram language model using the Xinhua and AFP sections of the Gigaword corpus (LDC2007T40) in addition to the target side of the parallel data.</S>
        <S ID="S-27344">This data represents a total of about 700 million words.</S>
        <S ID="S-27345">We manually removed documents of Gigaword that were released during periods that overlap with those of our development and test sets.</S>
        <S ID="S-27346">The language model was smoothed with the modified Kneser-Ney algorithm as implemented in (<REF ID="R-32" RPTR="66">Stolcke, 2002</REF>), and we only kept 4-grams and 5-grams that occurred at least three times in the training data.</S>
        <S ID="S-27347">6</S>
      </P>
      <P>
        <S ID="S-27348">For tuning and testing, we use the official NIST MT evaluation data for Chinese from 2002 to 2008 (MT02 to MT08), which all have four English references for each input sentence.</S>
        <S ID="S-27349">We used the 1082 sentences of MT05 for tuning and all other sets for testing.</S>
        <S ID="S-27350">Parameter tuning was done with minimum error rate training (<REF ID="R-24" RPTR="56">Och, 2003</REF>), which was used to maximize BLEU (<REF ID="R-25" RPTR="57">Papineni et al., 2001</REF>).</S>
        <S ID="S-27351">Since MERT is prone to search errors, especially with large numbers of parameters, we ran each tuning experiment three times with different initial conditions.</S>
        <S ID="S-27352">We used n-best lists of size 200 and a beam size of 200.</S>
        <S ID="S-27353">In the final evaluations, we report results using both TER (<REF ID="R-31" RPTR="65">Snover et al., 2006</REF>) and the original BLEU metric as described in (<REF ID="R-25" RPTR="58">Papineni et al., 2001</REF>).</S>
        <S ID="S-27354">All our evaluations are performed on uncased texts.</S>
        <S ID="S-27355">The results for our translation experiments are shown in Table 5.</S>
        <S ID="S-27356">We compared two systems: one with the set of features described earlier in this section.</S>
        <S ID="S-27357">The second system incorporates one additional feature, which is the dependency language</S>
      </P>
      <P>
        <S ID="S-27358">6 We found that sections of Gigaword other than Xinhua</S>
      </P>
      <P>
        <S ID="S-27359">and AFP provide almost no improvement in our experiments.</S>
        <S ID="S-27360">By leaving aside the other sections, we were able to increase the order of the language model to 5-gram and perform relatively little pruning.</S>
        <S ID="S-27361">This LM required 16GB of RAM during training.</S>
      </P>
      <P>
        <S ID="S-27362">model score computed with the dependency parsing algorithm described in Section 2.</S>
        <S ID="S-27363">We used the dependency model trained on the English CTB and ATB treebank, WSJ, and OntoNotes.</S>
      </P>
      <P>
        <S ID="S-27364">We see that the Moses decoder with integrated dependency language model systematically outperforms the Moses baseline.</S>
        <S ID="S-27365">For BLEU evaluations, differences are significant in four out of six cases, and in the case of TER, all differences are significant.</S>
        <S ID="S-27366">Regarding the small difference in BLEU scores on MT08, we would like to point out that tuning on MT05 and testing on MT08 had a rather adverse effect with respect to translation length: while the two systems are relatively close in terms of BLEU scores (24.83 and 24.91, respectively), the dependency LM provides a much bigger gain when evaluated with BLEU precision (27.73 vs. 28.79), i.e., by ignoring the brevity penalty.</S>
        <S ID="S-27367">On the other hand, the difference on MT08 is significant in terms of TER.</S>
        <S ID="S-27368">Table 6 provides experimental results on the NIST test data (excluding the tuning set MT05) for each of the three genres: newswire, web data, and speech (broadcast news and conversation).</S>
        <S ID="S-27369">The last column displays results for all test sets combined.</S>
        <S ID="S-27370">Results do not suggest any noticeable difference between genres, and the dependency language model provides significant gains on all genres, despite the fact that this model was primarily trained on news data.</S>
      </P>
      <P>
        <S ID="S-27371">We wish to emphasize that our positive results are particularly noteworthy because they are achieved over a baseline incorporating a competitive 5-gram language model.</S>
        <S ID="S-27372">As is widely acknowledged in the speech community, it can be difficult to outperform high-order n-gram models in large-scale experiments.</S>
        <S ID="S-27373">Finally, we quantified the effective running time of our phrase-based decoder with and without our dependency language</S>
      </P>
      <P>
        <S ID="S-27374">seconds 160</S>
      </P>
      <P>
        <S ID="S-27375">0</S>
      </P>
      <P>
        <S ID="S-27376">depLM baseline</S>
      </P>
      <P>
        <S ID="S-27377">10 20 30 40 50 60 70 80 90 sentence length</S>
      </P>
      <P>
        <S ID="S-27378">model using MT05 (Fig.</S>
        <S ID="S-27379">2).</S>
        <S ID="S-27380">In both settings, we selected the best tuned model, which yield the performance shown in the first column of Table 5.</S>
        <S ID="S-27381">Our decoder was run on an AMD Opteron Processor 2216 with 16GB of memory, and without resorting to any rescoring method such as cube pruning.</S>
        <S ID="S-27382">In the case of English translations of 40 words and shorter, the baseline system took 6.5 seconds per sentence, whereas the dependency LM system spent 15.6 seconds per sentence, i.e., 2.4 times the baseline running time.</S>
        <S ID="S-27383">In the case of translations</S>
      </P>
      <P>
        <S ID="S-27384">longer than 40 words, average speeds were respectively 17.5 and 59.5 seconds per sentence, i.e., the dependency was only 3.4 times slower.</S>
        <S ID="S-27385">7</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>5 Related work</HEADER>
      <P>
        <S ID="S-27386">Perhaps due to the high computational cost of synchronous CFG decoding, there have been various attempts to exploit syntactic knowledge and hierarchical structure in other machine translation experiments that do not require chart parsing.</S>
        <S ID="S-27387">Using a reranking framework, <REF ID="R-23" RPTR="55">Och et al. (2004)</REF> found that various types of syntactic features provided only minor gains in performance, suggesting that phrase-based systems (<REF ID="R-22" RPTR="54">Och and Ney, 2004</REF>) should exploit such information during rather than after decoding.</S>
        <S ID="S-27388"><REF ID="R-36" RPTR="70">Wang et al. (2007)</REF> sidestep the need to operate large-scale word order changes during decoding (and thus lessening the need for syntactic decoding) by rearranging input words in the training data to match the syntactic structure of the target language.</S>
        <S ID="S-27389">Finally, <REF ID="R-00" RPTR="0">Birch et al. (2007)</REF> exploit factored phrase-based translation models to associate each word with a supertag, which contains most of the information needed to build a full parse.</S>
        <S ID="S-27390">When combined with a supertag n-gram language model, it helps enforce grammatical constraints on the target side.</S>
      </P>
      <P>
        <S ID="S-27391">There have been various attempts to reduce the computational expense of syntactic decoding, including multi-pass decoding approaches (Zhang and Gildea, 2008; <REF ID="R-26" RPTR="59">Petrov et al., 2008</REF>) and rescoring approaches (<REF ID="R-13" RPTR="17">Huang and Chiang, 2007</REF>).</S>
        <S ID="S-27392">In the latter paper, Huang and Chiang introduce rescoring methods named &#8220;cube pruning&#8221; and &#8220;cube growing&#8221;, which first use a baseline decoder (either synchronous CFG or a phrase-based system) and no LM to generate a hypergraph, and then rescoring this hypergraph with a language model.</S>
        <S ID="S-27393">Huang and Chiang show significant speed increases with little impact on translation quality.</S>
        <S ID="S-27394">We believe that their approach is orthogonal (and possibly complementary) to our work, since our paper proposes a new model for fully-integrated decoding that increases MT performance, and does not rely on rescoring.</S>
      </P>
      <P>
        <S ID="S-27395">7 We note that our Java-based decoder is research rather</S>
      </P>
      <P>
        <S ID="S-27396">than industrial-strength code and that it could be substantially optimized.</S>
        <S ID="S-27397">Hence, we think the reader should pay more attention to relative speed differences between the two systems rather than absolute timings.</S>
      </P>
    </DIV>
    <DIV DEPTH="0">
      <HEADER>6 Conclusion and future work</HEADER>
      <P>
        <S ID="S-27398">In this paper, we presented a non-projective dependency parser whose time-complexity of O(n 2 ) improves upon the cubic time implementation of (<REF ID="R-19" RPTR="34">McDonald et al., 2005</REF><REF ID="R-20" RPTR="48">McDonald et al., 2005</REF>b), and does so with little loss in dependency accuracy (.25% to .34%).</S>
        <S ID="S-27399">Since this parser does not need to enforce projectivity constraints, it can easily be integrated into a phrase-based decoder during search (rather than during rescoring).</S>
        <S ID="S-27400">We use dependency scores as an extra feature in our MT experiments, and found that our dependency model provides significant gains over a competitive baseline that incorporates a large 5-gram language model (0.92% TER and 0.45% BLEU absolute improvements).</S>
        <S ID="S-27401">We plan to pursue other research directions using dependency models discussed in this paper.</S>
        <S ID="S-27402">While we use a dependency language model to exemplify the use of hierarchical structure within phrase based decoders, we could extend this work to incorporate dependency features of both sourceand target side.</S>
        <S ID="S-27403">Since parsing of the source is relatively inexpensive compared to the target side, it would be relatively easy to condition headmodifier dependencies not only on the two target words, but also on their corresponding Chinese words and their relative positions in the Chinese tree.</S>
        <S ID="S-27404">This would enable the decoder to capture syntactic reordering without requiring trees to be isomorphic or even projective.</S>
        <S ID="S-27405">It would also be interesting to apply these models to target languages that have free word order, which would presumably benefit more from the flexibility of non-projective dependency models.</S>
      </P>
    </DIV>
  </BODY>
  <ACKNOWLEDGMENTS>
    <P>
      <S ID="S-27406">The authors wish to thank the anonymous reviewers for their helpful comments on an earlier draft of this paper, and Daniel Cer for his implementation of Phrasal, a phrase-based decoder similar to Moses.</S>
      <S ID="S-27407">This paper is based on work funded by the Defense Advanced Research Projects Agency through IBM.</S>
      <S ID="S-27408">The content does not necessarily reflect the views of the U.S. Government, and no official endorsement should be inferred.</S>
    </P>
  </ACKNOWLEDGMENTS>
  <REFERENCES>
    <REFERENCE ID="0">
      <RAUTHOR>A Birch</RAUTHOR>
      <REFTITLE>CCG supertags in factored statistical machine translation.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="1">
      <RAUTHOR>A Popat Brants</RAUTHOR>
      <REFTITLE>Large language models in machine translation.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="2">
      <RAUTHOR>P Chang</RAUTHOR>
      <REFTITLE>Optimizing Chinese word segmentation for machine translation performance.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
    <REFERENCE ID="3">
      <RAUTHOR>D Chiang</RAUTHOR>
      <REFTITLE>A hierarchical phrase-based model for statistical machine translation.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="4">
      <RAUTHOR>Y J Chu</RAUTHOR>
      <REFTITLE>On the shortest arborescence of a directed graph.</REFTITLE>
      <DATE>1965</DATE>
    </REFERENCE>
    <REFERENCE ID="5">
      <RAUTHOR>K Crammer</RAUTHOR>
      <REFTITLE>Ultraconservative online algorithms for multiclass problems.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="6">
      <RAUTHOR>H Daume</RAUTHOR>
      <REFTITLE>Frustratingly easy domain adaptation.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="7">
      <RAUTHOR>Y Ding</RAUTHOR>
      <REFTITLE>Machine translation using probabilistic synchronous dependency insertion grammars.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="8">
      <RAUTHOR>J Edmonds</RAUTHOR>
      <REFTITLE>Optimum branchings.</REFTITLE>
      <DATE>1967</DATE>
    </REFERENCE>
    <REFERENCE ID="9">
      <RAUTHOR>J Eisner</RAUTHOR>
      <REFTITLE>Efficient parsing for bilexical context-free grammars and headautomaton grammars.</REFTITLE>
      <DATE>1999</DATE>
    </REFERENCE>
    <REFERENCE ID="10">
      <RAUTHOR>J Eisner</RAUTHOR>
      <REFTITLE>Three new probabilistic models for dependency parsing: An exploration.</REFTITLE>
      <DATE>1996</DATE>
    </REFERENCE>
    <REFERENCE ID="11">
      <RAUTHOR>H Fox</RAUTHOR>
      <REFTITLE>Phrasal cohesion and statistical machine translation.</REFTITLE>
      <DATE>2002</DATE>
    </REFERENCE>
    <REFERENCE ID="12">
      <RAUTHOR>L Georgiadis</RAUTHOR>
      <REFTITLE>Arborescence optimization problems solvable by Edmonds&#8217; algorithm.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="13">
      <RAUTHOR>L Huang</RAUTHOR>
      <REFTITLE>Forest rescoring: Faster decoding with integrated language models.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="14">
      <RAUTHOR>L Huang</RAUTHOR>
      <REFTITLE>Machine translation as lexicalized parsing with hooks.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="15">
      <RAUTHOR>K Knight</RAUTHOR>
      <REFTITLE>Decoding complexity in wordreplacement translation models.</REFTITLE>
      <DATE>1999</DATE>
    </REFERENCE>
    <REFERENCE ID="16">
      <RAUTHOR>P Koehn</RAUTHOR>
      <REFTITLE>Statistical phrase-based translation.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="17">
      <RAUTHOR>P Koehn</RAUTHOR>
      <REFTITLE>Moses: Open source toolkit for statistical machine translation.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="18">
      <RAUTHOR>D Marcu</RAUTHOR>
      <REFTITLE>SPMT: Statistical machine translation with syntactified target language phrases.</REFTITLE>
      <DATE>2006</DATE>
    </REFERENCE>
    <REFERENCE ID="19">
      <RAUTHOR>R McDonald</RAUTHOR>
      <REFTITLE>Online large-margin training of dependency parsers.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="20">
      <RAUTHOR>R McDonald</RAUTHOR>
      <REFTITLE>Non-projective dependency parsing using spanning tree algorithms.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="21">
      <RAUTHOR>J Nivre</RAUTHOR>
      <REFTITLE>An efficient algorithm for projective dependency parsing.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="22">
      <RAUTHOR>F Och</RAUTHOR>
      <REFTITLE>The alignment template approach to statistical machine translation.</REFTITLE>
      <DATE>2004</DATE>
    </REFERENCE>
    <REFERENCE ID="23">
      <RAUTHOR>F Och</RAUTHOR>
      <REFTITLE>A smorgasbord of features for statistical machine translation.</REFTITLE>
      <DATE>2004</DATE>
    </REFERENCE>
    <REFERENCE ID="24">
      <RAUTHOR>F Och</RAUTHOR>
      <REFTITLE>Minimum error rate training for statistical machine translation.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="25">
      <RAUTHOR>K Papineni</RAUTHOR>
      <REFTITLE>BLEU: a method for automatic evaluation of machine translation.</REFTITLE>
      <DATE>2001</DATE>
    </REFERENCE>
    <REFERENCE ID="26">
      <RAUTHOR>S Petrov</RAUTHOR>
      <REFTITLE>Coarseto-fine syntactic machine translation using language projections.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
    <REFERENCE ID="27">
      <RAUTHOR>C Quirk</RAUTHOR>
      <REFTITLE>Dependency treelet translation: syntactically informed phrasal SMT.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="28">
      <RAUTHOR>A Ratnaparkhi</RAUTHOR>
      <REFTITLE>A linear observed time statistical parser based on maximum entropy models.</REFTITLE>
      <DATE>1997</DATE>
    </REFERENCE>
    <REFERENCE ID="29">
      <RAUTHOR>S Riezler</RAUTHOR>
      <REFTITLE>On some pitfalls in automatic evaluation and significance testing for MT.</REFTITLE>
      <DATE>2005</DATE>
    </REFERENCE>
    <REFERENCE ID="30">
      <RAUTHOR>L Shen</RAUTHOR>
      <REFTITLE>A new string-to-dependency machine translation algorithm with a target dependency language model.</REFTITLE>
      <DATE>2008</DATE>
    </REFERENCE>
    <REFERENCE ID="31">
      <RAUTHOR>M Snover</RAUTHOR>
      <REFTITLE>A study of translation edit rate with targeted human annotation.</REFTITLE>
      <DATE>2006</DATE>
    </REFERENCE>
    <REFERENCE ID="32">
      <RAUTHOR>A Stolcke</RAUTHOR>
      <REFTITLE>SRILM &#8211; an extensible language modeling toolkit.</REFTITLE>
      <DATE>2002</DATE>
    </REFERENCE>
    <REFERENCE ID="33">
      <RAUTHOR>R Tarjan</RAUTHOR>
      <REFTITLE>Finding optimum branchings.</REFTITLE>
      <DATE>1977</DATE>
    </REFERENCE>
    <REFERENCE ID="34">
      <RAUTHOR>K Toutanova</RAUTHOR>
      <REFTITLE>Feature-rich part-of-speech tagging with a cyclic dependency network.</REFTITLE>
      <DATE>2003</DATE>
    </REFERENCE>
    <REFERENCE ID="35">
      <RAUTHOR>D Vadas</RAUTHOR>
      <REFTITLE>Adding noun phrase structure to the Penn treebank.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="36">
      <RAUTHOR>C Wang</RAUTHOR>
      <REFTITLE>Chinese syntactic reordering for statistical machine translation.</REFTITLE>
      <DATE>2007</DATE>
    </REFERENCE>
    <REFERENCE ID="37">
      <RAUTHOR>D Wu</RAUTHOR>
      <REFTITLE>A polynomial-time algorithm for statistical machine translation.</REFTITLE>
      <DATE>1996</DATE>
    </REFERENCE>
  </REFERENCES>
</PAPER>
